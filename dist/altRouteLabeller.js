!function(e,r){"object"==typeof exports&&"undefined"!=typeof module?r(exports):"function"==typeof define&&define.amd?define(["exports"],r):r((e="undefined"!=typeof globalThis?globalThis:e||self).altRouteLabeller={})}(this,(function(e){"use strict";var r="undefined"!=typeof globalThis?globalThis:"undefined"!=typeof window?window:"undefined"!=typeof global?global:"undefined"!=typeof self?self:{};var t=function(e){var r={exports:{}};return e(r,r.exports),r.exports}((function(e,r){function t(e,r,t){void 0===t&&(t={});var n={type:"Feature"};return(0===t.id||t.id)&&(n.id=t.id),t.bbox&&(n.bbox=t.bbox),n.properties=r||{},n.geometry=e,n}function n(e,r,n){return void 0===n&&(n={}),t({type:"Point",coordinates:e},r,n)}function o(e,r,n){void 0===n&&(n={});for(var o=0,i=e;o<i.length;o++){var a=i[o];if(a.length<4)throw new Error("Each LinearRing of a Polygon must have 4 or more Positions.");for(var s=0;s<a[a.length-1].length;s++)if(a[a.length-1][s]!==a[0][s])throw new Error("First and last Position are not equivalent.")}return t({type:"Polygon",coordinates:e},r,n)}function i(e,r,n){if(void 0===n&&(n={}),e.length<2)throw new Error("coordinates must be an array of two or more positions");return t({type:"LineString",coordinates:e},r,n)}function a(e,r){void 0===r&&(r={});var t={type:"FeatureCollection"};return r.id&&(t.id=r.id),r.bbox&&(t.bbox=r.bbox),t.features=e,t}function s(e,r,n){return void 0===n&&(n={}),t({type:"MultiLineString",coordinates:e},r,n)}function u(e,r,n){return void 0===n&&(n={}),t({type:"MultiPoint",coordinates:e},r,n)}function l(e,r,n){return void 0===n&&(n={}),t({type:"MultiPolygon",coordinates:e},r,n)}function c(e,t){void 0===t&&(t="kilometers");var n=r.factors[t];if(!n)throw new Error(t+" units is invalid");return e*n}function f(e,t){void 0===t&&(t="kilometers");var n=r.factors[t];if(!n)throw new Error(t+" units is invalid");return e/n}function d(e){return 180*(e%(2*Math.PI))/Math.PI}function h(e){return!isNaN(e)&&null!==e&&!Array.isArray(e)&&!/^\s*$/.test(e)}Object.defineProperty(r,"__esModule",{value:!0}),r.earthRadius=6371008.8,r.factors={centimeters:100*r.earthRadius,centimetres:100*r.earthRadius,degrees:r.earthRadius/111325,feet:3.28084*r.earthRadius,inches:39.37*r.earthRadius,kilometers:r.earthRadius/1e3,kilometres:r.earthRadius/1e3,meters:r.earthRadius,metres:r.earthRadius,miles:r.earthRadius/1609.344,millimeters:1e3*r.earthRadius,millimetres:1e3*r.earthRadius,nauticalmiles:r.earthRadius/1852,radians:1,yards:r.earthRadius/1.0936},r.unitsFactors={centimeters:100,centimetres:100,degrees:1/111325,feet:3.28084,inches:39.37,kilometers:.001,kilometres:.001,meters:1,metres:1,miles:1/1609.344,millimeters:1e3,millimetres:1e3,nauticalmiles:1/1852,radians:1/r.earthRadius,yards:1/1.0936},r.areaFactors={acres:247105e-9,centimeters:1e4,centimetres:1e4,feet:10.763910417,inches:1550.003100006,kilometers:1e-6,kilometres:1e-6,meters:1,metres:1,miles:386e-9,millimeters:1e6,millimetres:1e6,yards:1.195990046},r.feature=t,r.geometry=function(e,r,t){switch(e){case"Point":return n(r).geometry;case"LineString":return i(r).geometry;case"Polygon":return o(r).geometry;case"MultiPoint":return u(r).geometry;case"MultiLineString":return s(r).geometry;case"MultiPolygon":return l(r).geometry;default:throw new Error(e+" is invalid")}},r.point=n,r.points=function(e,r,t){return void 0===t&&(t={}),a(e.map((function(e){return n(e,r)})),t)},r.polygon=o,r.polygons=function(e,r,t){return void 0===t&&(t={}),a(e.map((function(e){return o(e,r)})),t)},r.lineString=i,r.lineStrings=function(e,r,t){return void 0===t&&(t={}),a(e.map((function(e){return i(e,r)})),t)},r.featureCollection=a,r.multiLineString=s,r.multiPoint=u,r.multiPolygon=l,r.geometryCollection=function(e,r,n){return void 0===n&&(n={}),t({type:"GeometryCollection",geometries:e},r,n)},r.round=function(e,r){if(void 0===r&&(r=0),r&&!(r>=0))throw new Error("precision must be a positive number");var t=Math.pow(10,r||0);return Math.round(e*t)/t},r.radiansToLength=c,r.lengthToRadians=f,r.lengthToDegrees=function(e,r){return d(f(e,r))},r.bearingToAzimuth=function(e){var r=e%360;return r<0&&(r+=360),r},r.radiansToDegrees=d,r.degreesToRadians=function(e){return e%360*Math.PI/180},r.convertLength=function(e,r,t){if(void 0===r&&(r="kilometers"),void 0===t&&(t="kilometers"),!(e>=0))throw new Error("length must be a positive number");return c(f(e,r),t)},r.convertArea=function(e,t,n){if(void 0===t&&(t="meters"),void 0===n&&(n="kilometers"),!(e>=0))throw new Error("area must be a positive number");var o=r.areaFactors[t];if(!o)throw new Error("invalid original units");var i=r.areaFactors[n];if(!i)throw new Error("invalid final units");return e/o*i},r.isNumber=h,r.isObject=function(e){return!!e&&e.constructor===Object},r.validateBBox=function(e){if(!e)throw new Error("bbox is required");if(!Array.isArray(e))throw new Error("bbox must be an Array");if(4!==e.length&&6!==e.length)throw new Error("bbox must be an Array of 4 or 6 numbers");e.forEach((function(e){if(!h(e))throw new Error("bbox must only contain numbers")}))},r.validateId=function(e){if(!e)throw new Error("id is required");if(-1===["string","number"].indexOf(typeof e))throw new Error("id must be a number or a string")},r.radians2degrees=function(){throw new Error("method has been renamed to `radiansToDegrees`")},r.degrees2radians=function(){throw new Error("method has been renamed to `degreesToRadians`")},r.distanceToDegrees=function(){throw new Error("method has been renamed to `lengthToDegrees`")},r.distanceToRadians=function(){throw new Error("method has been renamed to `lengthToRadians`")},r.radiansToDistance=function(){throw new Error("method has been renamed to `radiansToLength`")},r.bearingToAngle=function(){throw new Error("method has been renamed to `bearingToAzimuth`")},r.convertDistance=function(){throw new Error("method has been renamed to `convertLength`")}}));function n(e,r,t){if(null!==e)for(var o,i,a,s,u,l,c,f,d=0,h=0,g=e.type,m="FeatureCollection"===g,y="Feature"===g,w=m?e.features.length:1,p=0;p<w;p++){u=(f=!!(c=m?e.features[p].geometry:y?e.geometry:e)&&"GeometryCollection"===c.type)?c.geometries.length:1;for(var v=0;v<u;v++){var b=0,M=0;if(null!==(s=f?c.geometries[v]:c)){l=s.coordinates;var E=s.type;switch(d=!t||"Polygon"!==E&&"MultiPolygon"!==E?0:1,E){case null:break;case"Point":if(!1===r(l,h,p,b,M))return!1;h++,b++;break;case"LineString":case"MultiPoint":for(o=0;o<l.length;o++){if(!1===r(l[o],h,p,b,M))return!1;h++,"MultiPoint"===E&&b++}"LineString"===E&&b++;break;case"Polygon":case"MultiLineString":for(o=0;o<l.length;o++){for(i=0;i<l[o].length-d;i++){if(!1===r(l[o][i],h,p,b,M))return!1;h++}"MultiLineString"===E&&b++,"Polygon"===E&&M++}"Polygon"===E&&b++;break;case"MultiPolygon":for(o=0;o<l.length;o++){for(M=0,i=0;i<l[o].length;i++){for(a=0;a<l[o][i].length-d;a++){if(!1===r(l[o][i][a],h,p,b,M))return!1;h++}M++}b++}break;case"GeometryCollection":for(o=0;o<s.geometries.length;o++)if(!1===n(s.geometries[o],r,t))return!1;break;default:throw new Error("Unknown Geometry Type")}}}}}function o(e,r){var t;switch(e.type){case"FeatureCollection":for(t=0;t<e.features.length&&!1!==r(e.features[t].properties,t);t++);break;case"Feature":r(e.properties,0)}}function i(e,r){if("Feature"===e.type)r(e,0);else if("FeatureCollection"===e.type)for(var t=0;t<e.features.length&&!1!==r(e.features[t],t);t++);}function a(e,r){var t,n,o,i,a,s,u,l,c,f,d=0,h="FeatureCollection"===e.type,g="Feature"===e.type,m=h?e.features.length:1;for(t=0;t<m;t++){for(s=h?e.features[t].geometry:g?e.geometry:e,l=h?e.features[t].properties:g?e.properties:{},c=h?e.features[t].bbox:g?e.bbox:void 0,f=h?e.features[t].id:g?e.id:void 0,a=(u=!!s&&"GeometryCollection"===s.type)?s.geometries.length:1,o=0;o<a;o++)if(null!==(i=u?s.geometries[o]:s))switch(i.type){case"Point":case"LineString":case"MultiPoint":case"Polygon":case"MultiLineString":case"MultiPolygon":if(!1===r(i,d,l,c,f))return!1;break;case"GeometryCollection":for(n=0;n<i.geometries.length;n++)if(!1===r(i.geometries[n],d,l,c,f))return!1;break;default:throw new Error("Unknown Geometry Type")}else if(!1===r(null,d,l,c,f))return!1;d++}}function s(e,r){a(e,(function(e,n,o,i,a){var s,u=null===e?null:e.type;switch(u){case null:case"Point":case"LineString":case"Polygon":return!1!==r(t.feature(e,o,{bbox:i,id:a}),n,0)&&void 0}switch(u){case"MultiPoint":s="Point";break;case"MultiLineString":s="LineString";break;case"MultiPolygon":s="Polygon"}for(var l=0;l<e.coordinates.length;l++){var c={type:s,coordinates:e.coordinates[l]};if(!1===r(t.feature(c,o),n,l))return!1}}))}function u(e,r){s(e,(function(e,o,i){var a=0;if(e.geometry){var s=e.geometry.type;if("Point"!==s&&"MultiPoint"!==s){var u,l=0,c=0,f=0;return!1!==n(e,(function(n,s,d,h,g){if(void 0===u||o>l||h>c||g>f)return u=n,l=o,c=h,f=g,void(a=0);var m=t.lineString([u,n],e.properties);if(!1===r(m,o,i,g,a))return!1;a++,u=n}))&&void 0}}}))}function l(e,r){if(!e)throw new Error("geojson is required");s(e,(function(e,n,o){if(null!==e.geometry){var i=e.geometry.type,a=e.geometry.coordinates;switch(i){case"LineString":if(!1===r(e,n,o,0,0))return!1;break;case"Polygon":for(var s=0;s<a.length;s++)if(!1===r(t.lineString(a[s],e.properties),n,o,s))return!1}}}))}var c=n,f=function(e,r,t,o){var i=t;return n(e,(function(e,n,o,a,s){i=0===n&&void 0===t?e:r(i,e,n,o,a,s)}),o),i},d=o,h=function(e,r,t){var n=t;return o(e,(function(e,o){n=0===o&&void 0===t?e:r(n,e,o)})),n},g=i,m=function(e,r,t){var n=t;return i(e,(function(e,o){n=0===o&&void 0===t?e:r(n,e,o)})),n},y=function(e){var r=[];return n(e,(function(e){r.push(e)})),r},w=a,p=function(e,r,t){var n=t;return a(e,(function(e,o,i,a,s){n=0===o&&void 0===t?e:r(n,e,o,i,a,s)})),n},v=s,b=function(e,r,t){var n=t;return s(e,(function(e,o,i){n=0===o&&0===i&&void 0===t?e:r(n,e,o,i)})),n},M=u,E=function(e,r,t){var n=t,o=!1;return u(e,(function(e,i,a,s,u){n=!1===o&&void 0===t?e:r(n,e,i,a,s,u),o=!0})),n},P=l,R=function(e,r,t){var n=t;return l(e,(function(e,o,i,a){n=0===o&&void 0===t?e:r(n,e,o,i,a)})),n},x=function(e,r){if(r=r||{},!t.isObject(r))throw new Error("options is invalid");var n,o=r.featureIndex||0,i=r.multiFeatureIndex||0,a=r.geometryIndex||0,s=r.segmentIndex||0,u=r.properties;switch(e.type){case"FeatureCollection":o<0&&(o=e.features.length+o),u=u||e.features[o].properties,n=e.features[o].geometry;break;case"Feature":u=u||e.properties,n=e.geometry;break;case"Point":case"MultiPoint":return null;case"LineString":case"Polygon":case"MultiLineString":case"MultiPolygon":n=e;break;default:throw new Error("geojson is invalid")}if(null===n)return null;var l=n.coordinates;switch(n.type){case"Point":case"MultiPoint":return null;case"LineString":return s<0&&(s=l.length+s-1),t.lineString([l[s],l[s+1]],u,r);case"Polygon":return a<0&&(a=l.length+a),s<0&&(s=l[a].length+s-1),t.lineString([l[a][s],l[a][s+1]],u,r);case"MultiLineString":return i<0&&(i=l.length+i),s<0&&(s=l[i].length+s-1),t.lineString([l[i][s],l[i][s+1]],u,r);case"MultiPolygon":return i<0&&(i=l.length+i),a<0&&(a=l[i].length+a),s<0&&(s=l[i][a].length-s-1),t.lineString([l[i][a][s],l[i][a][s+1]],u,r)}throw new Error("geojson is invalid")},S=function(e,r){if(r=r||{},!t.isObject(r))throw new Error("options is invalid");var n,o=r.featureIndex||0,i=r.multiFeatureIndex||0,a=r.geometryIndex||0,s=r.coordIndex||0,u=r.properties;switch(e.type){case"FeatureCollection":o<0&&(o=e.features.length+o),u=u||e.features[o].properties,n=e.features[o].geometry;break;case"Feature":u=u||e.properties,n=e.geometry;break;case"Point":case"MultiPoint":return null;case"LineString":case"Polygon":case"MultiLineString":case"MultiPolygon":n=e;break;default:throw new Error("geojson is invalid")}if(null===n)return null;var l=n.coordinates;switch(n.type){case"Point":return t.point(l,u,r);case"MultiPoint":return i<0&&(i=l.length+i),t.point(l[i],u,r);case"LineString":return s<0&&(s=l.length+s),t.point(l[s],u,r);case"Polygon":return a<0&&(a=l.length+a),s<0&&(s=l[a].length+s),t.point(l[a][s],u,r);case"MultiLineString":return i<0&&(i=l.length+i),s<0&&(s=l[i].length+s),t.point(l[i][s],u,r);case"MultiPolygon":return i<0&&(i=l.length+i),a<0&&(a=l[i].length+a),s<0&&(s=l[i][a].length-s),t.point(l[i][a][s],u,r)}throw new Error("geojson is invalid")},F=Object.defineProperty({coordEach:c,coordReduce:f,propEach:d,propReduce:h,featureEach:g,featureReduce:m,coordAll:y,geomEach:w,geomReduce:p,flattenEach:v,flattenReduce:b,segmentEach:M,segmentReduce:E,lineEach:P,lineReduce:R,findSegment:x,findPoint:S},"__esModule",{value:!0});var T=function(e){if(!e)throw new Error("coord is required");if(!Array.isArray(e)){if("Feature"===e.type&&null!==e.geometry&&"Point"===e.geometry.type)return e.geometry.coordinates;if("Point"===e.type)return e.coordinates}if(Array.isArray(e)&&e.length>=2&&!Array.isArray(e[0])&&!Array.isArray(e[1]))return e;throw new Error("coord must be GeoJSON Point or an Array of numbers")};var L=function(e){if(Array.isArray(e))return e;if("Feature"===e.type){if(null!==e.geometry)return e.geometry.coordinates}else if(e.coordinates)return e.coordinates;throw new Error("coords must be GeoJSON Feature, Geometry Object or an Array")};var A=function e(r){if(r.length>1&&t.isNumber(r[0])&&t.isNumber(r[1]))return!0;if(Array.isArray(r[0])&&r[0].length)return e(r[0]);throw new Error("coordinates must only contain numbers")};var k=function(e,r,t){if(!r||!t)throw new Error("type and name required");if(!e||e.type!==r)throw new Error("Invalid input to "+t+": must be a "+r+", given "+e.type)};var C=function(e,r,t){if(!e)throw new Error("No feature passed");if(!t)throw new Error(".featureOf() requires a name");if(!e||"Feature"!==e.type||!e.geometry)throw new Error("Invalid input to "+t+", Feature with geometry required");if(!e.geometry||e.geometry.type!==r)throw new Error("Invalid input to "+t+": must be a "+r+", given "+e.geometry.type)};var q=function(e,r,t){if(!e)throw new Error("No featureCollection passed");if(!t)throw new Error(".collectionOf() requires a name");if(!e||"FeatureCollection"!==e.type)throw new Error("Invalid input to "+t+", FeatureCollection required");for(var n=0,o=e.features;n<o.length;n++){var i=o[n];if(!i||"Feature"!==i.type||!i.geometry)throw new Error("Invalid input to "+t+", Feature with geometry required");if(!i.geometry||i.geometry.type!==r)throw new Error("Invalid input to "+t+": must be a "+r+", given "+i.geometry.type)}};var O=function(e){return"Feature"===e.type?e.geometry:e};var I=function(e,r){return"FeatureCollection"===e.type?"FeatureCollection":"GeometryCollection"===e.type?"GeometryCollection":"Feature"===e.type&&null!==e.geometry?e.geometry.type:e.type},j=Object.defineProperty({getCoord:T,getCoords:L,containsNumber:A,geojsonType:k,featureOf:C,collectionOf:q,getGeom:O,getType:I},"__esModule",{value:!0});function _(e,r,n){if(void 0===n&&(n={}),!0===n.final)return function(e,r){var t=_(r,e);return t=(t+180)%360}(e,r);var o=j.getCoord(e),i=j.getCoord(r),a=t.degreesToRadians(o[0]),s=t.degreesToRadians(i[0]),u=t.degreesToRadians(o[1]),l=t.degreesToRadians(i[1]),c=Math.sin(s-a)*Math.cos(l),f=Math.cos(u)*Math.sin(l)-Math.sin(u)*Math.cos(l)*Math.cos(s-a);return t.radiansToDegrees(Math.atan2(c,f))}var G=_,D=Object.defineProperty({default:G},"__esModule",{value:!0});var N=function(e,r,n,o){void 0===o&&(o={});var i=j.getCoord(e),a=t.degreesToRadians(i[0]),s=t.degreesToRadians(i[1]),u=t.degreesToRadians(n),l=t.lengthToRadians(r,o.units),c=Math.asin(Math.sin(s)*Math.cos(l)+Math.cos(s)*Math.sin(l)*Math.cos(u)),f=a+Math.atan2(Math.sin(u)*Math.sin(l)*Math.cos(s),Math.cos(l)-Math.sin(s)*Math.sin(c)),d=t.radiansToDegrees(f),h=t.radiansToDegrees(c);return t.point([d,h],o.properties)},z=Object.defineProperty({default:N},"__esModule",{value:!0});var J=function(e,r,n){void 0===n&&(n={});var o=j.getCoord(e),i=j.getCoord(r),a=t.degreesToRadians(i[1]-o[1]),s=t.degreesToRadians(i[0]-o[0]),u=t.degreesToRadians(o[1]),l=t.degreesToRadians(i[1]),c=Math.pow(Math.sin(a/2),2)+Math.pow(Math.sin(s/2),2)*Math.cos(u)*Math.cos(l);return t.radiansToLength(2*Math.atan2(Math.sqrt(c),Math.sqrt(1-c)),n.units)},B=Object.defineProperty({default:J},"__esModule",{value:!0}),U=r&&r.__importDefault||function(e){return e&&e.__esModule?e:{default:e}},$=U(D),H=U(z),K=U(B);var Q=function(e,r,n){void 0===n&&(n={});for(var o=j.getGeom(e).coordinates,i=0,a=0;a<o.length&&!(r>=i&&a===o.length-1);a++){if(i>=r){var s=r-i;if(s){var u=$.default(o[a],o[a-1])-180;return H.default(o[a],s,u,n)}return t.point(o[a])}i+=K.default(o[a],o[a+1],n)}return t.point(o[o.length-1])},V=(r&&r.__importDefault||function(e){return e&&e.__esModule?e:{default:e}})(B);var W=function(e,r){return void 0===r&&(r={}),F.segmentReduce(e,(function(e,t){var n=t.geometry.coordinates;return e+V.default(n[0],n[1],r)}),0)},X=6371008.8,Y={meters:X,metres:X,millimeters:6371008800,millimetres:6371008800,centimeters:637100880,centimetres:637100880,kilometers:6371.0088,kilometres:6371.0088,miles:3958.761333810546,nauticalmiles:X/1852,inches:39.37*X,yards:5825721.287490856,feet:20902260.511392,radians:1,degrees:57.22891354143274};function Z(e,r,t){if(!oe(t=t||{}))throw new Error("options is invalid");var n=t.bbox,o=t.id;if(void 0===e)throw new Error("geometry is required");if(r&&r.constructor!==Object)throw new Error("properties must be an Object");n&&function(e){if(!e)throw new Error("bbox is required");if(!Array.isArray(e))throw new Error("bbox must be an Array");if(4!==e.length&&6!==e.length)throw new Error("bbox must be an Array of 4 or 6 numbers");e.forEach((function(e){if(!ne(e))throw new Error("bbox must only contain numbers")}))}(n),o&&function(e){if(!e)throw new Error("id is required");if(-1===["string","number"].indexOf(typeof e))throw new Error("id must be a number or a string")}(o);var i={type:"Feature"};return o&&(i.id=o),n&&(i.bbox=n),i.properties=r||{},i.geometry=e,i}function ee(e,r,t){if(!e)throw new Error("coordinates is required");if(e.length<2)throw new Error("coordinates must be an array of two or more positions");if(!ne(e[0][1])||!ne(e[0][1]))throw new Error("coordinates must contain numbers");return Z({type:"LineString",coordinates:e},r,t)}function re(e){if(null==e)throw new Error("radians is required");return 180*(e%(2*Math.PI))/Math.PI}function te(e){if(null==e)throw new Error("degrees is required");return e%360*Math.PI/180}function ne(e){return!isNaN(e)&&null!==e&&!Array.isArray(e)}function oe(e){return!!e&&e.constructor===Object}function ie(e){if(!e)throw new Error("coord is required");if("Feature"===e.type&&null!==e.geometry&&"Point"===e.geometry.type)return e.geometry.coordinates;if("Point"===e.type)return e.coordinates;if(Array.isArray(e)&&e.length>=2&&void 0===e[0].length&&void 0===e[1].length)return e;throw new Error("coord must be GeoJSON Point or an Array of numbers")}function ae(e,r,t){if(!oe(t=t||{}))throw new Error("options is invalid");if(!0===t.final)return function(e,r){var t=ae(r,e);return t=(t+180)%360}(e,r);var n=ie(e),o=ie(r),i=te(n[0]),a=te(o[0]),s=te(n[1]),u=te(o[1]),l=Math.sin(a-i)*Math.cos(u),c=Math.cos(s)*Math.sin(u)-Math.sin(s)*Math.cos(u)*Math.cos(a-i);return re(Math.atan2(l,c))}function se(e,r,t){if(!oe(t=t||{}))throw new Error("options is invalid");var n=t.units,o=ie(e),i=ie(r),a=te(i[1]-o[1]),s=te(i[0]-o[0]),u=te(o[1]),l=te(i[1]),c=Math.pow(Math.sin(a/2),2)+Math.pow(Math.sin(s/2),2)*Math.cos(u)*Math.cos(l);return function(e,r){if(null==e)throw new Error("radians is required");if(r&&"string"!=typeof r)throw new Error("units must be a string");var t=Y[r||"kilometers"];if(!t)throw new Error(r+" units is invalid");return e*t}(2*Math.atan2(Math.sqrt(c),Math.sqrt(1-c)),n)}function ue(e,r,t,n){if(!oe(n=n||{}))throw new Error("options is invalid");var o=n.units,i=n.properties,a=ie(e),s=te(a[0]),u=te(a[1]),l=te(t),c=function(e,r){if(null==e)throw new Error("distance is required");if(r&&"string"!=typeof r)throw new Error("units must be a string");var t=Y[r||"kilometers"];if(!t)throw new Error(r+" units is invalid");return e/t}(r,o),f=Math.asin(Math.sin(u)*Math.cos(c)+Math.cos(u)*Math.sin(c)*Math.cos(l));return function(e,r,t){if(!e)throw new Error("coordinates is required");if(!Array.isArray(e))throw new Error("coordinates must be an Array");if(e.length<2)throw new Error("coordinates must be at least 2 numbers long");if(!ne(e[0])||!ne(e[1]))throw new Error("coordinates must contain numbers");return Z({type:"Point",coordinates:e},r,t)}([re(s+Math.atan2(Math.sin(l)*Math.sin(c)*Math.cos(u),Math.cos(c)-Math.sin(u)*Math.sin(f))),re(f)],i)}function le(e,r){const t=W(r);return{lngLat:T(Q(r,t*e)),axis:function(e){const r=L(e),t=G(r[0],r[r.length-1]);if(Math.abs(t)<45||Math.abs(t)>135)return"vertical";return"horizontal"}(function(e,r,t,n){if(!oe(n=n||{}))throw new Error("options is invalid");var o,i=[];if("Feature"===e.type)o=e.geometry.coordinates;else{if("LineString"!==e.type)throw new Error("input must be a LineString Feature or Geometry");o=e.coordinates}for(var a,s,u,l=0,c=0;c<o.length&&!(r>=l&&c===o.length-1);c++){if(l>r&&0===i.length){if(!(a=r-l))return i.push(o[c]),ee(i);s=ae(o[c],o[c-1])-180,u=ue(o[c],a,s,n),i.push(u.geometry.coordinates)}if(l>=t)return(a=t-l)?(s=ae(o[c],o[c-1])-180,u=ue(o[c],a,s,n),i.push(u.geometry.coordinates),ee(i)):(i.push(o[c]),ee(i));if(l>=r&&i.push(o[c]),c===o.length-1)return ee(i);l+=se(o[c],o[c+1],n)}return ee(o[o.length-1])}(r,t*(e-.1),t*(e+.1)))}}const ce=e=>"".concat(e[0].toFixed(6),",").concat(e[1].toFixed(6));function fe(e){if(e.length<2)return e;const r=e.map(y),n=new Map;return[].concat(...r).forEach((e=>{n.set(ce(e),(n.get(ce(e))||0)+1)})),r.map((e=>function(e,r){const n=e.findIndex((e=>1===r.get(ce(e))));if(-1===n)return t.lineString(e);const o=n+e.slice(n).findIndex((e=>1!==r.get(ce(e))));return t.lineString(e.slice(n,o))}(e,n)))}const de=e=>t.lineString(function(e){const r=[];for(let t=0;t<e.length;t++)ge(r[r.length-1],e[t])||r.push(e[t]);return r}(y(e))),he=(e,r)=>Math.abs(e-r)<1e-6,ge=function(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:[],r=arguments.length>1&&void 0!==arguments[1]?arguments[1]:[];return he(e[0],r[0])&&he(e[1],r[1])};function me(e){return e.map(((r,t)=>{const n=function(e,r){if(0===r.length)return 0;return r.map((r=>G(r.lngLat,e.lngLat))).reduce(((e,r)=>e+r))/r.length}(r,[...e.slice(0,t),...e.slice(t+1)]);return{lngLat:r.lngLat,anchor:ye(r.axis,n)}}))}function ye(e,r){return"vertical"===e?r>0?"left":"right":Math.abs(r)<90?"bottom":"top"}e.findDistinctSegments=fe,e.getLabelPositions=function(e){return me(fe(e.features.map(de)).map((e=>le(.5,e))))},Object.defineProperty(e,"__esModule",{value:!0})}));
