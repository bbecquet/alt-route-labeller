{"version":3,"file":"altRouteLabeller.js","sources":["../node_modules/@turf/helpers/index.js","../node_modules/@turf/meta/index.js","../node_modules/@turf/invariant/index.js","../node_modules/@turf/bearing/index.js","../node_modules/@turf/destination/index.js","../node_modules/@turf/distance/index.js","../node_modules/@turf/along/index.js","../node_modules/@turf/length/index.js","../index.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * @module helpers\n */\n/**\n * Earth Radius used with the Harvesine formula and approximates using a spherical (non-ellipsoid) Earth.\n *\n * @memberof helpers\n * @type {number}\n */\nexports.earthRadius = 6371008.8;\n/**\n * Unit of measurement factors using a spherical (non-ellipsoid) earth radius.\n *\n * @memberof helpers\n * @type {Object}\n */\nexports.factors = {\n    centimeters: exports.earthRadius * 100,\n    centimetres: exports.earthRadius * 100,\n    degrees: exports.earthRadius / 111325,\n    feet: exports.earthRadius * 3.28084,\n    inches: exports.earthRadius * 39.370,\n    kilometers: exports.earthRadius / 1000,\n    kilometres: exports.earthRadius / 1000,\n    meters: exports.earthRadius,\n    metres: exports.earthRadius,\n    miles: exports.earthRadius / 1609.344,\n    millimeters: exports.earthRadius * 1000,\n    millimetres: exports.earthRadius * 1000,\n    nauticalmiles: exports.earthRadius / 1852,\n    radians: 1,\n    yards: exports.earthRadius / 1.0936,\n};\n/**\n * Units of measurement factors based on 1 meter.\n *\n * @memberof helpers\n * @type {Object}\n */\nexports.unitsFactors = {\n    centimeters: 100,\n    centimetres: 100,\n    degrees: 1 / 111325,\n    feet: 3.28084,\n    inches: 39.370,\n    kilometers: 1 / 1000,\n    kilometres: 1 / 1000,\n    meters: 1,\n    metres: 1,\n    miles: 1 / 1609.344,\n    millimeters: 1000,\n    millimetres: 1000,\n    nauticalmiles: 1 / 1852,\n    radians: 1 / exports.earthRadius,\n    yards: 1 / 1.0936,\n};\n/**\n * Area of measurement factors based on 1 square meter.\n *\n * @memberof helpers\n * @type {Object}\n */\nexports.areaFactors = {\n    acres: 0.000247105,\n    centimeters: 10000,\n    centimetres: 10000,\n    feet: 10.763910417,\n    inches: 1550.003100006,\n    kilometers: 0.000001,\n    kilometres: 0.000001,\n    meters: 1,\n    metres: 1,\n    miles: 3.86e-7,\n    millimeters: 1000000,\n    millimetres: 1000000,\n    yards: 1.195990046,\n};\n/**\n * Wraps a GeoJSON {@link Geometry} in a GeoJSON {@link Feature}.\n *\n * @name feature\n * @param {Geometry} geometry input geometry\n * @param {Object} [properties={}] an Object of key-value pairs to add as properties\n * @param {Object} [options={}] Optional Parameters\n * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north] associated with the Feature\n * @param {string|number} [options.id] Identifier associated with the Feature\n * @returns {Feature} a GeoJSON Feature\n * @example\n * var geometry = {\n *   \"type\": \"Point\",\n *   \"coordinates\": [110, 50]\n * };\n *\n * var feature = turf.feature(geometry);\n *\n * //=feature\n */\nfunction feature(geom, properties, options) {\n    if (options === void 0) { options = {}; }\n    var feat = { type: \"Feature\" };\n    if (options.id === 0 || options.id) {\n        feat.id = options.id;\n    }\n    if (options.bbox) {\n        feat.bbox = options.bbox;\n    }\n    feat.properties = properties || {};\n    feat.geometry = geom;\n    return feat;\n}\nexports.feature = feature;\n/**\n * Creates a GeoJSON {@link Geometry} from a Geometry string type & coordinates.\n * For GeometryCollection type use `helpers.geometryCollection`\n *\n * @name geometry\n * @param {string} type Geometry Type\n * @param {Array<any>} coordinates Coordinates\n * @param {Object} [options={}] Optional Parameters\n * @returns {Geometry} a GeoJSON Geometry\n * @example\n * var type = \"Point\";\n * var coordinates = [110, 50];\n * var geometry = turf.geometry(type, coordinates);\n * // => geometry\n */\nfunction geometry(type, coordinates, options) {\n    if (options === void 0) { options = {}; }\n    switch (type) {\n        case \"Point\": return point(coordinates).geometry;\n        case \"LineString\": return lineString(coordinates).geometry;\n        case \"Polygon\": return polygon(coordinates).geometry;\n        case \"MultiPoint\": return multiPoint(coordinates).geometry;\n        case \"MultiLineString\": return multiLineString(coordinates).geometry;\n        case \"MultiPolygon\": return multiPolygon(coordinates).geometry;\n        default: throw new Error(type + \" is invalid\");\n    }\n}\nexports.geometry = geometry;\n/**\n * Creates a {@link Point} {@link Feature} from a Position.\n *\n * @name point\n * @param {Array<number>} coordinates longitude, latitude position (each in decimal degrees)\n * @param {Object} [properties={}] an Object of key-value pairs to add as properties\n * @param {Object} [options={}] Optional Parameters\n * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north] associated with the Feature\n * @param {string|number} [options.id] Identifier associated with the Feature\n * @returns {Feature<Point>} a Point feature\n * @example\n * var point = turf.point([-75.343, 39.984]);\n *\n * //=point\n */\nfunction point(coordinates, properties, options) {\n    if (options === void 0) { options = {}; }\n    var geom = {\n        type: \"Point\",\n        coordinates: coordinates,\n    };\n    return feature(geom, properties, options);\n}\nexports.point = point;\n/**\n * Creates a {@link Point} {@link FeatureCollection} from an Array of Point coordinates.\n *\n * @name points\n * @param {Array<Array<number>>} coordinates an array of Points\n * @param {Object} [properties={}] Translate these properties to each Feature\n * @param {Object} [options={}] Optional Parameters\n * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north]\n * associated with the FeatureCollection\n * @param {string|number} [options.id] Identifier associated with the FeatureCollection\n * @returns {FeatureCollection<Point>} Point Feature\n * @example\n * var points = turf.points([\n *   [-75, 39],\n *   [-80, 45],\n *   [-78, 50]\n * ]);\n *\n * //=points\n */\nfunction points(coordinates, properties, options) {\n    if (options === void 0) { options = {}; }\n    return featureCollection(coordinates.map(function (coords) {\n        return point(coords, properties);\n    }), options);\n}\nexports.points = points;\n/**\n * Creates a {@link Polygon} {@link Feature} from an Array of LinearRings.\n *\n * @name polygon\n * @param {Array<Array<Array<number>>>} coordinates an array of LinearRings\n * @param {Object} [properties={}] an Object of key-value pairs to add as properties\n * @param {Object} [options={}] Optional Parameters\n * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north] associated with the Feature\n * @param {string|number} [options.id] Identifier associated with the Feature\n * @returns {Feature<Polygon>} Polygon Feature\n * @example\n * var polygon = turf.polygon([[[-5, 52], [-4, 56], [-2, 51], [-7, 54], [-5, 52]]], { name: 'poly1' });\n *\n * //=polygon\n */\nfunction polygon(coordinates, properties, options) {\n    if (options === void 0) { options = {}; }\n    for (var _i = 0, coordinates_1 = coordinates; _i < coordinates_1.length; _i++) {\n        var ring = coordinates_1[_i];\n        if (ring.length < 4) {\n            throw new Error(\"Each LinearRing of a Polygon must have 4 or more Positions.\");\n        }\n        for (var j = 0; j < ring[ring.length - 1].length; j++) {\n            // Check if first point of Polygon contains two numbers\n            if (ring[ring.length - 1][j] !== ring[0][j]) {\n                throw new Error(\"First and last Position are not equivalent.\");\n            }\n        }\n    }\n    var geom = {\n        type: \"Polygon\",\n        coordinates: coordinates,\n    };\n    return feature(geom, properties, options);\n}\nexports.polygon = polygon;\n/**\n * Creates a {@link Polygon} {@link FeatureCollection} from an Array of Polygon coordinates.\n *\n * @name polygons\n * @param {Array<Array<Array<Array<number>>>>} coordinates an array of Polygon coordinates\n * @param {Object} [properties={}] an Object of key-value pairs to add as properties\n * @param {Object} [options={}] Optional Parameters\n * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north] associated with the Feature\n * @param {string|number} [options.id] Identifier associated with the FeatureCollection\n * @returns {FeatureCollection<Polygon>} Polygon FeatureCollection\n * @example\n * var polygons = turf.polygons([\n *   [[[-5, 52], [-4, 56], [-2, 51], [-7, 54], [-5, 52]]],\n *   [[[-15, 42], [-14, 46], [-12, 41], [-17, 44], [-15, 42]]],\n * ]);\n *\n * //=polygons\n */\nfunction polygons(coordinates, properties, options) {\n    if (options === void 0) { options = {}; }\n    return featureCollection(coordinates.map(function (coords) {\n        return polygon(coords, properties);\n    }), options);\n}\nexports.polygons = polygons;\n/**\n * Creates a {@link LineString} {@link Feature} from an Array of Positions.\n *\n * @name lineString\n * @param {Array<Array<number>>} coordinates an array of Positions\n * @param {Object} [properties={}] an Object of key-value pairs to add as properties\n * @param {Object} [options={}] Optional Parameters\n * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north] associated with the Feature\n * @param {string|number} [options.id] Identifier associated with the Feature\n * @returns {Feature<LineString>} LineString Feature\n * @example\n * var linestring1 = turf.lineString([[-24, 63], [-23, 60], [-25, 65], [-20, 69]], {name: 'line 1'});\n * var linestring2 = turf.lineString([[-14, 43], [-13, 40], [-15, 45], [-10, 49]], {name: 'line 2'});\n *\n * //=linestring1\n * //=linestring2\n */\nfunction lineString(coordinates, properties, options) {\n    if (options === void 0) { options = {}; }\n    if (coordinates.length < 2) {\n        throw new Error(\"coordinates must be an array of two or more positions\");\n    }\n    var geom = {\n        type: \"LineString\",\n        coordinates: coordinates,\n    };\n    return feature(geom, properties, options);\n}\nexports.lineString = lineString;\n/**\n * Creates a {@link LineString} {@link FeatureCollection} from an Array of LineString coordinates.\n *\n * @name lineStrings\n * @param {Array<Array<Array<number>>>} coordinates an array of LinearRings\n * @param {Object} [properties={}] an Object of key-value pairs to add as properties\n * @param {Object} [options={}] Optional Parameters\n * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north]\n * associated with the FeatureCollection\n * @param {string|number} [options.id] Identifier associated with the FeatureCollection\n * @returns {FeatureCollection<LineString>} LineString FeatureCollection\n * @example\n * var linestrings = turf.lineStrings([\n *   [[-24, 63], [-23, 60], [-25, 65], [-20, 69]],\n *   [[-14, 43], [-13, 40], [-15, 45], [-10, 49]]\n * ]);\n *\n * //=linestrings\n */\nfunction lineStrings(coordinates, properties, options) {\n    if (options === void 0) { options = {}; }\n    return featureCollection(coordinates.map(function (coords) {\n        return lineString(coords, properties);\n    }), options);\n}\nexports.lineStrings = lineStrings;\n/**\n * Takes one or more {@link Feature|Features} and creates a {@link FeatureCollection}.\n *\n * @name featureCollection\n * @param {Feature[]} features input features\n * @param {Object} [options={}] Optional Parameters\n * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north] associated with the Feature\n * @param {string|number} [options.id] Identifier associated with the Feature\n * @returns {FeatureCollection} FeatureCollection of Features\n * @example\n * var locationA = turf.point([-75.343, 39.984], {name: 'Location A'});\n * var locationB = turf.point([-75.833, 39.284], {name: 'Location B'});\n * var locationC = turf.point([-75.534, 39.123], {name: 'Location C'});\n *\n * var collection = turf.featureCollection([\n *   locationA,\n *   locationB,\n *   locationC\n * ]);\n *\n * //=collection\n */\nfunction featureCollection(features, options) {\n    if (options === void 0) { options = {}; }\n    var fc = { type: \"FeatureCollection\" };\n    if (options.id) {\n        fc.id = options.id;\n    }\n    if (options.bbox) {\n        fc.bbox = options.bbox;\n    }\n    fc.features = features;\n    return fc;\n}\nexports.featureCollection = featureCollection;\n/**\n * Creates a {@link Feature<MultiLineString>} based on a\n * coordinate array. Properties can be added optionally.\n *\n * @name multiLineString\n * @param {Array<Array<Array<number>>>} coordinates an array of LineStrings\n * @param {Object} [properties={}] an Object of key-value pairs to add as properties\n * @param {Object} [options={}] Optional Parameters\n * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north] associated with the Feature\n * @param {string|number} [options.id] Identifier associated with the Feature\n * @returns {Feature<MultiLineString>} a MultiLineString feature\n * @throws {Error} if no coordinates are passed\n * @example\n * var multiLine = turf.multiLineString([[[0,0],[10,10]]]);\n *\n * //=multiLine\n */\nfunction multiLineString(coordinates, properties, options) {\n    if (options === void 0) { options = {}; }\n    var geom = {\n        type: \"MultiLineString\",\n        coordinates: coordinates,\n    };\n    return feature(geom, properties, options);\n}\nexports.multiLineString = multiLineString;\n/**\n * Creates a {@link Feature<MultiPoint>} based on a\n * coordinate array. Properties can be added optionally.\n *\n * @name multiPoint\n * @param {Array<Array<number>>} coordinates an array of Positions\n * @param {Object} [properties={}] an Object of key-value pairs to add as properties\n * @param {Object} [options={}] Optional Parameters\n * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north] associated with the Feature\n * @param {string|number} [options.id] Identifier associated with the Feature\n * @returns {Feature<MultiPoint>} a MultiPoint feature\n * @throws {Error} if no coordinates are passed\n * @example\n * var multiPt = turf.multiPoint([[0,0],[10,10]]);\n *\n * //=multiPt\n */\nfunction multiPoint(coordinates, properties, options) {\n    if (options === void 0) { options = {}; }\n    var geom = {\n        type: \"MultiPoint\",\n        coordinates: coordinates,\n    };\n    return feature(geom, properties, options);\n}\nexports.multiPoint = multiPoint;\n/**\n * Creates a {@link Feature<MultiPolygon>} based on a\n * coordinate array. Properties can be added optionally.\n *\n * @name multiPolygon\n * @param {Array<Array<Array<Array<number>>>>} coordinates an array of Polygons\n * @param {Object} [properties={}] an Object of key-value pairs to add as properties\n * @param {Object} [options={}] Optional Parameters\n * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north] associated with the Feature\n * @param {string|number} [options.id] Identifier associated with the Feature\n * @returns {Feature<MultiPolygon>} a multipolygon feature\n * @throws {Error} if no coordinates are passed\n * @example\n * var multiPoly = turf.multiPolygon([[[[0,0],[0,10],[10,10],[10,0],[0,0]]]]);\n *\n * //=multiPoly\n *\n */\nfunction multiPolygon(coordinates, properties, options) {\n    if (options === void 0) { options = {}; }\n    var geom = {\n        type: \"MultiPolygon\",\n        coordinates: coordinates,\n    };\n    return feature(geom, properties, options);\n}\nexports.multiPolygon = multiPolygon;\n/**\n * Creates a {@link Feature<GeometryCollection>} based on a\n * coordinate array. Properties can be added optionally.\n *\n * @name geometryCollection\n * @param {Array<Geometry>} geometries an array of GeoJSON Geometries\n * @param {Object} [properties={}] an Object of key-value pairs to add as properties\n * @param {Object} [options={}] Optional Parameters\n * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north] associated with the Feature\n * @param {string|number} [options.id] Identifier associated with the Feature\n * @returns {Feature<GeometryCollection>} a GeoJSON GeometryCollection Feature\n * @example\n * var pt = turf.geometry(\"Point\", [100, 0]);\n * var line = turf.geometry(\"LineString\", [[101, 0], [102, 1]]);\n * var collection = turf.geometryCollection([pt, line]);\n *\n * // => collection\n */\nfunction geometryCollection(geometries, properties, options) {\n    if (options === void 0) { options = {}; }\n    var geom = {\n        type: \"GeometryCollection\",\n        geometries: geometries,\n    };\n    return feature(geom, properties, options);\n}\nexports.geometryCollection = geometryCollection;\n/**\n * Round number to precision\n *\n * @param {number} num Number\n * @param {number} [precision=0] Precision\n * @returns {number} rounded number\n * @example\n * turf.round(120.4321)\n * //=120\n *\n * turf.round(120.4321, 2)\n * //=120.43\n */\nfunction round(num, precision) {\n    if (precision === void 0) { precision = 0; }\n    if (precision && !(precision >= 0)) {\n        throw new Error(\"precision must be a positive number\");\n    }\n    var multiplier = Math.pow(10, precision || 0);\n    return Math.round(num * multiplier) / multiplier;\n}\nexports.round = round;\n/**\n * Convert a distance measurement (assuming a spherical Earth) from radians to a more friendly unit.\n * Valid units: miles, nauticalmiles, inches, yards, meters, metres, kilometers, centimeters, feet\n *\n * @name radiansToLength\n * @param {number} radians in radians across the sphere\n * @param {string} [units=\"kilometers\"] can be degrees, radians, miles, or kilometers inches, yards, metres,\n * meters, kilometres, kilometers.\n * @returns {number} distance\n */\nfunction radiansToLength(radians, units) {\n    if (units === void 0) { units = \"kilometers\"; }\n    var factor = exports.factors[units];\n    if (!factor) {\n        throw new Error(units + \" units is invalid\");\n    }\n    return radians * factor;\n}\nexports.radiansToLength = radiansToLength;\n/**\n * Convert a distance measurement (assuming a spherical Earth) from a real-world unit into radians\n * Valid units: miles, nauticalmiles, inches, yards, meters, metres, kilometers, centimeters, feet\n *\n * @name lengthToRadians\n * @param {number} distance in real units\n * @param {string} [units=\"kilometers\"] can be degrees, radians, miles, or kilometers inches, yards, metres,\n * meters, kilometres, kilometers.\n * @returns {number} radians\n */\nfunction lengthToRadians(distance, units) {\n    if (units === void 0) { units = \"kilometers\"; }\n    var factor = exports.factors[units];\n    if (!factor) {\n        throw new Error(units + \" units is invalid\");\n    }\n    return distance / factor;\n}\nexports.lengthToRadians = lengthToRadians;\n/**\n * Convert a distance measurement (assuming a spherical Earth) from a real-world unit into degrees\n * Valid units: miles, nauticalmiles, inches, yards, meters, metres, centimeters, kilometres, feet\n *\n * @name lengthToDegrees\n * @param {number} distance in real units\n * @param {string} [units=\"kilometers\"] can be degrees, radians, miles, or kilometers inches, yards, metres,\n * meters, kilometres, kilometers.\n * @returns {number} degrees\n */\nfunction lengthToDegrees(distance, units) {\n    return radiansToDegrees(lengthToRadians(distance, units));\n}\nexports.lengthToDegrees = lengthToDegrees;\n/**\n * Converts any bearing angle from the north line direction (positive clockwise)\n * and returns an angle between 0-360 degrees (positive clockwise), 0 being the north line\n *\n * @name bearingToAzimuth\n * @param {number} bearing angle, between -180 and +180 degrees\n * @returns {number} angle between 0 and 360 degrees\n */\nfunction bearingToAzimuth(bearing) {\n    var angle = bearing % 360;\n    if (angle < 0) {\n        angle += 360;\n    }\n    return angle;\n}\nexports.bearingToAzimuth = bearingToAzimuth;\n/**\n * Converts an angle in radians to degrees\n *\n * @name radiansToDegrees\n * @param {number} radians angle in radians\n * @returns {number} degrees between 0 and 360 degrees\n */\nfunction radiansToDegrees(radians) {\n    var degrees = radians % (2 * Math.PI);\n    return degrees * 180 / Math.PI;\n}\nexports.radiansToDegrees = radiansToDegrees;\n/**\n * Converts an angle in degrees to radians\n *\n * @name degreesToRadians\n * @param {number} degrees angle between 0 and 360 degrees\n * @returns {number} angle in radians\n */\nfunction degreesToRadians(degrees) {\n    var radians = degrees % 360;\n    return radians * Math.PI / 180;\n}\nexports.degreesToRadians = degreesToRadians;\n/**\n * Converts a length to the requested unit.\n * Valid units: miles, nauticalmiles, inches, yards, meters, metres, kilometers, centimeters, feet\n *\n * @param {number} length to be converted\n * @param {Units} [originalUnit=\"kilometers\"] of the length\n * @param {Units} [finalUnit=\"kilometers\"] returned unit\n * @returns {number} the converted length\n */\nfunction convertLength(length, originalUnit, finalUnit) {\n    if (originalUnit === void 0) { originalUnit = \"kilometers\"; }\n    if (finalUnit === void 0) { finalUnit = \"kilometers\"; }\n    if (!(length >= 0)) {\n        throw new Error(\"length must be a positive number\");\n    }\n    return radiansToLength(lengthToRadians(length, originalUnit), finalUnit);\n}\nexports.convertLength = convertLength;\n/**\n * Converts a area to the requested unit.\n * Valid units: kilometers, kilometres, meters, metres, centimetres, millimeters, acres, miles, yards, feet, inches\n * @param {number} area to be converted\n * @param {Units} [originalUnit=\"meters\"] of the distance\n * @param {Units} [finalUnit=\"kilometers\"] returned unit\n * @returns {number} the converted distance\n */\nfunction convertArea(area, originalUnit, finalUnit) {\n    if (originalUnit === void 0) { originalUnit = \"meters\"; }\n    if (finalUnit === void 0) { finalUnit = \"kilometers\"; }\n    if (!(area >= 0)) {\n        throw new Error(\"area must be a positive number\");\n    }\n    var startFactor = exports.areaFactors[originalUnit];\n    if (!startFactor) {\n        throw new Error(\"invalid original units\");\n    }\n    var finalFactor = exports.areaFactors[finalUnit];\n    if (!finalFactor) {\n        throw new Error(\"invalid final units\");\n    }\n    return (area / startFactor) * finalFactor;\n}\nexports.convertArea = convertArea;\n/**\n * isNumber\n *\n * @param {*} num Number to validate\n * @returns {boolean} true/false\n * @example\n * turf.isNumber(123)\n * //=true\n * turf.isNumber('foo')\n * //=false\n */\nfunction isNumber(num) {\n    return !isNaN(num) && num !== null && !Array.isArray(num) && !/^\\s*$/.test(num);\n}\nexports.isNumber = isNumber;\n/**\n * isObject\n *\n * @param {*} input variable to validate\n * @returns {boolean} true/false\n * @example\n * turf.isObject({elevation: 10})\n * //=true\n * turf.isObject('foo')\n * //=false\n */\nfunction isObject(input) {\n    return (!!input) && (input.constructor === Object);\n}\nexports.isObject = isObject;\n/**\n * Validate BBox\n *\n * @private\n * @param {Array<number>} bbox BBox to validate\n * @returns {void}\n * @throws Error if BBox is not valid\n * @example\n * validateBBox([-180, -40, 110, 50])\n * //=OK\n * validateBBox([-180, -40])\n * //=Error\n * validateBBox('Foo')\n * //=Error\n * validateBBox(5)\n * //=Error\n * validateBBox(null)\n * //=Error\n * validateBBox(undefined)\n * //=Error\n */\nfunction validateBBox(bbox) {\n    if (!bbox) {\n        throw new Error(\"bbox is required\");\n    }\n    if (!Array.isArray(bbox)) {\n        throw new Error(\"bbox must be an Array\");\n    }\n    if (bbox.length !== 4 && bbox.length !== 6) {\n        throw new Error(\"bbox must be an Array of 4 or 6 numbers\");\n    }\n    bbox.forEach(function (num) {\n        if (!isNumber(num)) {\n            throw new Error(\"bbox must only contain numbers\");\n        }\n    });\n}\nexports.validateBBox = validateBBox;\n/**\n * Validate Id\n *\n * @private\n * @param {string|number} id Id to validate\n * @returns {void}\n * @throws Error if Id is not valid\n * @example\n * validateId([-180, -40, 110, 50])\n * //=Error\n * validateId([-180, -40])\n * //=Error\n * validateId('Foo')\n * //=OK\n * validateId(5)\n * //=OK\n * validateId(null)\n * //=Error\n * validateId(undefined)\n * //=Error\n */\nfunction validateId(id) {\n    if (!id) {\n        throw new Error(\"id is required\");\n    }\n    if ([\"string\", \"number\"].indexOf(typeof id) === -1) {\n        throw new Error(\"id must be a number or a string\");\n    }\n}\nexports.validateId = validateId;\n// Deprecated methods\nfunction radians2degrees() {\n    throw new Error(\"method has been renamed to `radiansToDegrees`\");\n}\nexports.radians2degrees = radians2degrees;\nfunction degrees2radians() {\n    throw new Error(\"method has been renamed to `degreesToRadians`\");\n}\nexports.degrees2radians = degrees2radians;\nfunction distanceToDegrees() {\n    throw new Error(\"method has been renamed to `lengthToDegrees`\");\n}\nexports.distanceToDegrees = distanceToDegrees;\nfunction distanceToRadians() {\n    throw new Error(\"method has been renamed to `lengthToRadians`\");\n}\nexports.distanceToRadians = distanceToRadians;\nfunction radiansToDistance() {\n    throw new Error(\"method has been renamed to `radiansToLength`\");\n}\nexports.radiansToDistance = radiansToDistance;\nfunction bearingToAngle() {\n    throw new Error(\"method has been renamed to `bearingToAzimuth`\");\n}\nexports.bearingToAngle = bearingToAngle;\nfunction convertDistance() {\n    throw new Error(\"method has been renamed to `convertLength`\");\n}\nexports.convertDistance = convertDistance;\n","'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nvar helpers = require('@turf/helpers');\n\n/**\n * Callback for coordEach\n *\n * @callback coordEachCallback\n * @param {Array<number>} currentCoord The current coordinate being processed.\n * @param {number} coordIndex The current index of the coordinate being processed.\n * @param {number} featureIndex The current index of the Feature being processed.\n * @param {number} multiFeatureIndex The current index of the Multi-Feature being processed.\n * @param {number} geometryIndex The current index of the Geometry being processed.\n */\n\n/**\n * Iterate over coordinates in any GeoJSON object, similar to Array.forEach()\n *\n * @name coordEach\n * @param {FeatureCollection|Feature|Geometry} geojson any GeoJSON object\n * @param {Function} callback a method that takes (currentCoord, coordIndex, featureIndex, multiFeatureIndex)\n * @param {boolean} [excludeWrapCoord=false] whether or not to include the final coordinate of LinearRings that wraps the ring in its iteration.\n * @returns {void}\n * @example\n * var features = turf.featureCollection([\n *   turf.point([26, 37], {\"foo\": \"bar\"}),\n *   turf.point([36, 53], {\"hello\": \"world\"})\n * ]);\n *\n * turf.coordEach(features, function (currentCoord, coordIndex, featureIndex, multiFeatureIndex, geometryIndex) {\n *   //=currentCoord\n *   //=coordIndex\n *   //=featureIndex\n *   //=multiFeatureIndex\n *   //=geometryIndex\n * });\n */\nfunction coordEach(geojson, callback, excludeWrapCoord) {\n    // Handles null Geometry -- Skips this GeoJSON\n    if (geojson === null) return;\n    var j, k, l, geometry, stopG, coords,\n        geometryMaybeCollection,\n        wrapShrink = 0,\n        coordIndex = 0,\n        isGeometryCollection,\n        type = geojson.type,\n        isFeatureCollection = type === 'FeatureCollection',\n        isFeature = type === 'Feature',\n        stop = isFeatureCollection ? geojson.features.length : 1;\n\n    // This logic may look a little weird. The reason why it is that way\n    // is because it's trying to be fast. GeoJSON supports multiple kinds\n    // of objects at its root: FeatureCollection, Features, Geometries.\n    // This function has the responsibility of handling all of them, and that\n    // means that some of the `for` loops you see below actually just don't apply\n    // to certain inputs. For instance, if you give this just a\n    // Point geometry, then both loops are short-circuited and all we do\n    // is gradually rename the input until it's called 'geometry'.\n    //\n    // This also aims to allocate as few resources as possible: just a\n    // few numbers and booleans, rather than any temporary arrays as would\n    // be required with the normalization approach.\n    for (var featureIndex = 0; featureIndex < stop; featureIndex++) {\n        geometryMaybeCollection = (isFeatureCollection ? geojson.features[featureIndex].geometry :\n            (isFeature ? geojson.geometry : geojson));\n        isGeometryCollection = (geometryMaybeCollection) ? geometryMaybeCollection.type === 'GeometryCollection' : false;\n        stopG = isGeometryCollection ? geometryMaybeCollection.geometries.length : 1;\n\n        for (var geomIndex = 0; geomIndex < stopG; geomIndex++) {\n            var multiFeatureIndex = 0;\n            var geometryIndex = 0;\n            geometry = isGeometryCollection ?\n                geometryMaybeCollection.geometries[geomIndex] : geometryMaybeCollection;\n\n            // Handles null Geometry -- Skips this geometry\n            if (geometry === null) continue;\n            coords = geometry.coordinates;\n            var geomType = geometry.type;\n\n            wrapShrink = (excludeWrapCoord && (geomType === 'Polygon' || geomType === 'MultiPolygon')) ? 1 : 0;\n\n            switch (geomType) {\n            case null:\n                break;\n            case 'Point':\n                if (callback(coords, coordIndex, featureIndex, multiFeatureIndex, geometryIndex) === false) return false;\n                coordIndex++;\n                multiFeatureIndex++;\n                break;\n            case 'LineString':\n            case 'MultiPoint':\n                for (j = 0; j < coords.length; j++) {\n                    if (callback(coords[j], coordIndex, featureIndex, multiFeatureIndex, geometryIndex) === false) return false;\n                    coordIndex++;\n                    if (geomType === 'MultiPoint') multiFeatureIndex++;\n                }\n                if (geomType === 'LineString') multiFeatureIndex++;\n                break;\n            case 'Polygon':\n            case 'MultiLineString':\n                for (j = 0; j < coords.length; j++) {\n                    for (k = 0; k < coords[j].length - wrapShrink; k++) {\n                        if (callback(coords[j][k], coordIndex, featureIndex, multiFeatureIndex, geometryIndex) === false) return false;\n                        coordIndex++;\n                    }\n                    if (geomType === 'MultiLineString') multiFeatureIndex++;\n                    if (geomType === 'Polygon') geometryIndex++;\n                }\n                if (geomType === 'Polygon') multiFeatureIndex++;\n                break;\n            case 'MultiPolygon':\n                for (j = 0; j < coords.length; j++) {\n                    geometryIndex = 0;\n                    for (k = 0; k < coords[j].length; k++) {\n                        for (l = 0; l < coords[j][k].length - wrapShrink; l++) {\n                            if (callback(coords[j][k][l], coordIndex, featureIndex, multiFeatureIndex, geometryIndex) === false) return false;\n                            coordIndex++;\n                        }\n                        geometryIndex++;\n                    }\n                    multiFeatureIndex++;\n                }\n                break;\n            case 'GeometryCollection':\n                for (j = 0; j < geometry.geometries.length; j++)\n                    if (coordEach(geometry.geometries[j], callback, excludeWrapCoord) === false) return false;\n                break;\n            default:\n                throw new Error('Unknown Geometry Type');\n            }\n        }\n    }\n}\n\n/**\n * Callback for coordReduce\n *\n * The first time the callback function is called, the values provided as arguments depend\n * on whether the reduce method has an initialValue argument.\n *\n * If an initialValue is provided to the reduce method:\n *  - The previousValue argument is initialValue.\n *  - The currentValue argument is the value of the first element present in the array.\n *\n * If an initialValue is not provided:\n *  - The previousValue argument is the value of the first element present in the array.\n *  - The currentValue argument is the value of the second element present in the array.\n *\n * @callback coordReduceCallback\n * @param {*} previousValue The accumulated value previously returned in the last invocation\n * of the callback, or initialValue, if supplied.\n * @param {Array<number>} currentCoord The current coordinate being processed.\n * @param {number} coordIndex The current index of the coordinate being processed.\n * Starts at index 0, if an initialValue is provided, and at index 1 otherwise.\n * @param {number} featureIndex The current index of the Feature being processed.\n * @param {number} multiFeatureIndex The current index of the Multi-Feature being processed.\n * @param {number} geometryIndex The current index of the Geometry being processed.\n */\n\n/**\n * Reduce coordinates in any GeoJSON object, similar to Array.reduce()\n *\n * @name coordReduce\n * @param {FeatureCollection|Geometry|Feature} geojson any GeoJSON object\n * @param {Function} callback a method that takes (previousValue, currentCoord, coordIndex)\n * @param {*} [initialValue] Value to use as the first argument to the first call of the callback.\n * @param {boolean} [excludeWrapCoord=false] whether or not to include the final coordinate of LinearRings that wraps the ring in its iteration.\n * @returns {*} The value that results from the reduction.\n * @example\n * var features = turf.featureCollection([\n *   turf.point([26, 37], {\"foo\": \"bar\"}),\n *   turf.point([36, 53], {\"hello\": \"world\"})\n * ]);\n *\n * turf.coordReduce(features, function (previousValue, currentCoord, coordIndex, featureIndex, multiFeatureIndex, geometryIndex) {\n *   //=previousValue\n *   //=currentCoord\n *   //=coordIndex\n *   //=featureIndex\n *   //=multiFeatureIndex\n *   //=geometryIndex\n *   return currentCoord;\n * });\n */\nfunction coordReduce(geojson, callback, initialValue, excludeWrapCoord) {\n    var previousValue = initialValue;\n    coordEach(geojson, function (currentCoord, coordIndex, featureIndex, multiFeatureIndex, geometryIndex) {\n        if (coordIndex === 0 && initialValue === undefined) previousValue = currentCoord;\n        else previousValue = callback(previousValue, currentCoord, coordIndex, featureIndex, multiFeatureIndex, geometryIndex);\n    }, excludeWrapCoord);\n    return previousValue;\n}\n\n/**\n * Callback for propEach\n *\n * @callback propEachCallback\n * @param {Object} currentProperties The current Properties being processed.\n * @param {number} featureIndex The current index of the Feature being processed.\n */\n\n/**\n * Iterate over properties in any GeoJSON object, similar to Array.forEach()\n *\n * @name propEach\n * @param {FeatureCollection|Feature} geojson any GeoJSON object\n * @param {Function} callback a method that takes (currentProperties, featureIndex)\n * @returns {void}\n * @example\n * var features = turf.featureCollection([\n *     turf.point([26, 37], {foo: 'bar'}),\n *     turf.point([36, 53], {hello: 'world'})\n * ]);\n *\n * turf.propEach(features, function (currentProperties, featureIndex) {\n *   //=currentProperties\n *   //=featureIndex\n * });\n */\nfunction propEach(geojson, callback) {\n    var i;\n    switch (geojson.type) {\n    case 'FeatureCollection':\n        for (i = 0; i < geojson.features.length; i++) {\n            if (callback(geojson.features[i].properties, i) === false) break;\n        }\n        break;\n    case 'Feature':\n        callback(geojson.properties, 0);\n        break;\n    }\n}\n\n\n/**\n * Callback for propReduce\n *\n * The first time the callback function is called, the values provided as arguments depend\n * on whether the reduce method has an initialValue argument.\n *\n * If an initialValue is provided to the reduce method:\n *  - The previousValue argument is initialValue.\n *  - The currentValue argument is the value of the first element present in the array.\n *\n * If an initialValue is not provided:\n *  - The previousValue argument is the value of the first element present in the array.\n *  - The currentValue argument is the value of the second element present in the array.\n *\n * @callback propReduceCallback\n * @param {*} previousValue The accumulated value previously returned in the last invocation\n * of the callback, or initialValue, if supplied.\n * @param {*} currentProperties The current Properties being processed.\n * @param {number} featureIndex The current index of the Feature being processed.\n */\n\n/**\n * Reduce properties in any GeoJSON object into a single value,\n * similar to how Array.reduce works. However, in this case we lazily run\n * the reduction, so an array of all properties is unnecessary.\n *\n * @name propReduce\n * @param {FeatureCollection|Feature} geojson any GeoJSON object\n * @param {Function} callback a method that takes (previousValue, currentProperties, featureIndex)\n * @param {*} [initialValue] Value to use as the first argument to the first call of the callback.\n * @returns {*} The value that results from the reduction.\n * @example\n * var features = turf.featureCollection([\n *     turf.point([26, 37], {foo: 'bar'}),\n *     turf.point([36, 53], {hello: 'world'})\n * ]);\n *\n * turf.propReduce(features, function (previousValue, currentProperties, featureIndex) {\n *   //=previousValue\n *   //=currentProperties\n *   //=featureIndex\n *   return currentProperties\n * });\n */\nfunction propReduce(geojson, callback, initialValue) {\n    var previousValue = initialValue;\n    propEach(geojson, function (currentProperties, featureIndex) {\n        if (featureIndex === 0 && initialValue === undefined) previousValue = currentProperties;\n        else previousValue = callback(previousValue, currentProperties, featureIndex);\n    });\n    return previousValue;\n}\n\n/**\n * Callback for featureEach\n *\n * @callback featureEachCallback\n * @param {Feature<any>} currentFeature The current Feature being processed.\n * @param {number} featureIndex The current index of the Feature being processed.\n */\n\n/**\n * Iterate over features in any GeoJSON object, similar to\n * Array.forEach.\n *\n * @name featureEach\n * @param {FeatureCollection|Feature|Geometry} geojson any GeoJSON object\n * @param {Function} callback a method that takes (currentFeature, featureIndex)\n * @returns {void}\n * @example\n * var features = turf.featureCollection([\n *   turf.point([26, 37], {foo: 'bar'}),\n *   turf.point([36, 53], {hello: 'world'})\n * ]);\n *\n * turf.featureEach(features, function (currentFeature, featureIndex) {\n *   //=currentFeature\n *   //=featureIndex\n * });\n */\nfunction featureEach(geojson, callback) {\n    if (geojson.type === 'Feature') {\n        callback(geojson, 0);\n    } else if (geojson.type === 'FeatureCollection') {\n        for (var i = 0; i < geojson.features.length; i++) {\n            if (callback(geojson.features[i], i) === false) break;\n        }\n    }\n}\n\n/**\n * Callback for featureReduce\n *\n * The first time the callback function is called, the values provided as arguments depend\n * on whether the reduce method has an initialValue argument.\n *\n * If an initialValue is provided to the reduce method:\n *  - The previousValue argument is initialValue.\n *  - The currentValue argument is the value of the first element present in the array.\n *\n * If an initialValue is not provided:\n *  - The previousValue argument is the value of the first element present in the array.\n *  - The currentValue argument is the value of the second element present in the array.\n *\n * @callback featureReduceCallback\n * @param {*} previousValue The accumulated value previously returned in the last invocation\n * of the callback, or initialValue, if supplied.\n * @param {Feature} currentFeature The current Feature being processed.\n * @param {number} featureIndex The current index of the Feature being processed.\n */\n\n/**\n * Reduce features in any GeoJSON object, similar to Array.reduce().\n *\n * @name featureReduce\n * @param {FeatureCollection|Feature|Geometry} geojson any GeoJSON object\n * @param {Function} callback a method that takes (previousValue, currentFeature, featureIndex)\n * @param {*} [initialValue] Value to use as the first argument to the first call of the callback.\n * @returns {*} The value that results from the reduction.\n * @example\n * var features = turf.featureCollection([\n *   turf.point([26, 37], {\"foo\": \"bar\"}),\n *   turf.point([36, 53], {\"hello\": \"world\"})\n * ]);\n *\n * turf.featureReduce(features, function (previousValue, currentFeature, featureIndex) {\n *   //=previousValue\n *   //=currentFeature\n *   //=featureIndex\n *   return currentFeature\n * });\n */\nfunction featureReduce(geojson, callback, initialValue) {\n    var previousValue = initialValue;\n    featureEach(geojson, function (currentFeature, featureIndex) {\n        if (featureIndex === 0 && initialValue === undefined) previousValue = currentFeature;\n        else previousValue = callback(previousValue, currentFeature, featureIndex);\n    });\n    return previousValue;\n}\n\n/**\n * Get all coordinates from any GeoJSON object.\n *\n * @name coordAll\n * @param {FeatureCollection|Feature|Geometry} geojson any GeoJSON object\n * @returns {Array<Array<number>>} coordinate position array\n * @example\n * var features = turf.featureCollection([\n *   turf.point([26, 37], {foo: 'bar'}),\n *   turf.point([36, 53], {hello: 'world'})\n * ]);\n *\n * var coords = turf.coordAll(features);\n * //= [[26, 37], [36, 53]]\n */\nfunction coordAll(geojson) {\n    var coords = [];\n    coordEach(geojson, function (coord) {\n        coords.push(coord);\n    });\n    return coords;\n}\n\n/**\n * Callback for geomEach\n *\n * @callback geomEachCallback\n * @param {Geometry} currentGeometry The current Geometry being processed.\n * @param {number} featureIndex The current index of the Feature being processed.\n * @param {Object} featureProperties The current Feature Properties being processed.\n * @param {Array<number>} featureBBox The current Feature BBox being processed.\n * @param {number|string} featureId The current Feature Id being processed.\n */\n\n/**\n * Iterate over each geometry in any GeoJSON object, similar to Array.forEach()\n *\n * @name geomEach\n * @param {FeatureCollection|Feature|Geometry} geojson any GeoJSON object\n * @param {Function} callback a method that takes (currentGeometry, featureIndex, featureProperties, featureBBox, featureId)\n * @returns {void}\n * @example\n * var features = turf.featureCollection([\n *     turf.point([26, 37], {foo: 'bar'}),\n *     turf.point([36, 53], {hello: 'world'})\n * ]);\n *\n * turf.geomEach(features, function (currentGeometry, featureIndex, featureProperties, featureBBox, featureId) {\n *   //=currentGeometry\n *   //=featureIndex\n *   //=featureProperties\n *   //=featureBBox\n *   //=featureId\n * });\n */\nfunction geomEach(geojson, callback) {\n    var i, j, g, geometry, stopG,\n        geometryMaybeCollection,\n        isGeometryCollection,\n        featureProperties,\n        featureBBox,\n        featureId,\n        featureIndex = 0,\n        isFeatureCollection = geojson.type === 'FeatureCollection',\n        isFeature = geojson.type === 'Feature',\n        stop = isFeatureCollection ? geojson.features.length : 1;\n\n    // This logic may look a little weird. The reason why it is that way\n    // is because it's trying to be fast. GeoJSON supports multiple kinds\n    // of objects at its root: FeatureCollection, Features, Geometries.\n    // This function has the responsibility of handling all of them, and that\n    // means that some of the `for` loops you see below actually just don't apply\n    // to certain inputs. For instance, if you give this just a\n    // Point geometry, then both loops are short-circuited and all we do\n    // is gradually rename the input until it's called 'geometry'.\n    //\n    // This also aims to allocate as few resources as possible: just a\n    // few numbers and booleans, rather than any temporary arrays as would\n    // be required with the normalization approach.\n    for (i = 0; i < stop; i++) {\n\n        geometryMaybeCollection = (isFeatureCollection ? geojson.features[i].geometry :\n            (isFeature ? geojson.geometry : geojson));\n        featureProperties = (isFeatureCollection ? geojson.features[i].properties :\n            (isFeature ? geojson.properties : {}));\n        featureBBox = (isFeatureCollection ? geojson.features[i].bbox :\n            (isFeature ? geojson.bbox : undefined));\n        featureId = (isFeatureCollection ? geojson.features[i].id :\n            (isFeature ? geojson.id : undefined));\n        isGeometryCollection = (geometryMaybeCollection) ? geometryMaybeCollection.type === 'GeometryCollection' : false;\n        stopG = isGeometryCollection ? geometryMaybeCollection.geometries.length : 1;\n\n        for (g = 0; g < stopG; g++) {\n            geometry = isGeometryCollection ?\n                geometryMaybeCollection.geometries[g] : geometryMaybeCollection;\n\n            // Handle null Geometry\n            if (geometry === null) {\n                if (callback(null, featureIndex, featureProperties, featureBBox, featureId) === false) return false;\n                continue;\n            }\n            switch (geometry.type) {\n            case 'Point':\n            case 'LineString':\n            case 'MultiPoint':\n            case 'Polygon':\n            case 'MultiLineString':\n            case 'MultiPolygon': {\n                if (callback(geometry, featureIndex, featureProperties, featureBBox, featureId) === false) return false;\n                break;\n            }\n            case 'GeometryCollection': {\n                for (j = 0; j < geometry.geometries.length; j++) {\n                    if (callback(geometry.geometries[j], featureIndex, featureProperties, featureBBox, featureId) === false) return false;\n                }\n                break;\n            }\n            default:\n                throw new Error('Unknown Geometry Type');\n            }\n        }\n        // Only increase `featureIndex` per each feature\n        featureIndex++;\n    }\n}\n\n/**\n * Callback for geomReduce\n *\n * The first time the callback function is called, the values provided as arguments depend\n * on whether the reduce method has an initialValue argument.\n *\n * If an initialValue is provided to the reduce method:\n *  - The previousValue argument is initialValue.\n *  - The currentValue argument is the value of the first element present in the array.\n *\n * If an initialValue is not provided:\n *  - The previousValue argument is the value of the first element present in the array.\n *  - The currentValue argument is the value of the second element present in the array.\n *\n * @callback geomReduceCallback\n * @param {*} previousValue The accumulated value previously returned in the last invocation\n * of the callback, or initialValue, if supplied.\n * @param {Geometry} currentGeometry The current Geometry being processed.\n * @param {number} featureIndex The current index of the Feature being processed.\n * @param {Object} featureProperties The current Feature Properties being processed.\n * @param {Array<number>} featureBBox The current Feature BBox being processed.\n * @param {number|string} featureId The current Feature Id being processed.\n */\n\n/**\n * Reduce geometry in any GeoJSON object, similar to Array.reduce().\n *\n * @name geomReduce\n * @param {FeatureCollection|Feature|Geometry} geojson any GeoJSON object\n * @param {Function} callback a method that takes (previousValue, currentGeometry, featureIndex, featureProperties, featureBBox, featureId)\n * @param {*} [initialValue] Value to use as the first argument to the first call of the callback.\n * @returns {*} The value that results from the reduction.\n * @example\n * var features = turf.featureCollection([\n *     turf.point([26, 37], {foo: 'bar'}),\n *     turf.point([36, 53], {hello: 'world'})\n * ]);\n *\n * turf.geomReduce(features, function (previousValue, currentGeometry, featureIndex, featureProperties, featureBBox, featureId) {\n *   //=previousValue\n *   //=currentGeometry\n *   //=featureIndex\n *   //=featureProperties\n *   //=featureBBox\n *   //=featureId\n *   return currentGeometry\n * });\n */\nfunction geomReduce(geojson, callback, initialValue) {\n    var previousValue = initialValue;\n    geomEach(geojson, function (currentGeometry, featureIndex, featureProperties, featureBBox, featureId) {\n        if (featureIndex === 0 && initialValue === undefined) previousValue = currentGeometry;\n        else previousValue = callback(previousValue, currentGeometry, featureIndex, featureProperties, featureBBox, featureId);\n    });\n    return previousValue;\n}\n\n/**\n * Callback for flattenEach\n *\n * @callback flattenEachCallback\n * @param {Feature} currentFeature The current flattened feature being processed.\n * @param {number} featureIndex The current index of the Feature being processed.\n * @param {number} multiFeatureIndex The current index of the Multi-Feature being processed.\n */\n\n/**\n * Iterate over flattened features in any GeoJSON object, similar to\n * Array.forEach.\n *\n * @name flattenEach\n * @param {FeatureCollection|Feature|Geometry} geojson any GeoJSON object\n * @param {Function} callback a method that takes (currentFeature, featureIndex, multiFeatureIndex)\n * @example\n * var features = turf.featureCollection([\n *     turf.point([26, 37], {foo: 'bar'}),\n *     turf.multiPoint([[40, 30], [36, 53]], {hello: 'world'})\n * ]);\n *\n * turf.flattenEach(features, function (currentFeature, featureIndex, multiFeatureIndex) {\n *   //=currentFeature\n *   //=featureIndex\n *   //=multiFeatureIndex\n * });\n */\nfunction flattenEach(geojson, callback) {\n    geomEach(geojson, function (geometry, featureIndex, properties, bbox, id) {\n        // Callback for single geometry\n        var type = (geometry === null) ? null : geometry.type;\n        switch (type) {\n        case null:\n        case 'Point':\n        case 'LineString':\n        case 'Polygon':\n            if (callback(helpers.feature(geometry, properties, {bbox: bbox, id: id}), featureIndex, 0) === false) return false;\n            return;\n        }\n\n        var geomType;\n\n        // Callback for multi-geometry\n        switch (type) {\n        case 'MultiPoint':\n            geomType = 'Point';\n            break;\n        case 'MultiLineString':\n            geomType = 'LineString';\n            break;\n        case 'MultiPolygon':\n            geomType = 'Polygon';\n            break;\n        }\n\n        for (var multiFeatureIndex = 0; multiFeatureIndex < geometry.coordinates.length; multiFeatureIndex++) {\n            var coordinate = geometry.coordinates[multiFeatureIndex];\n            var geom = {\n                type: geomType,\n                coordinates: coordinate\n            };\n            if (callback(helpers.feature(geom, properties), featureIndex, multiFeatureIndex) === false) return false;\n        }\n    });\n}\n\n/**\n * Callback for flattenReduce\n *\n * The first time the callback function is called, the values provided as arguments depend\n * on whether the reduce method has an initialValue argument.\n *\n * If an initialValue is provided to the reduce method:\n *  - The previousValue argument is initialValue.\n *  - The currentValue argument is the value of the first element present in the array.\n *\n * If an initialValue is not provided:\n *  - The previousValue argument is the value of the first element present in the array.\n *  - The currentValue argument is the value of the second element present in the array.\n *\n * @callback flattenReduceCallback\n * @param {*} previousValue The accumulated value previously returned in the last invocation\n * of the callback, or initialValue, if supplied.\n * @param {Feature} currentFeature The current Feature being processed.\n * @param {number} featureIndex The current index of the Feature being processed.\n * @param {number} multiFeatureIndex The current index of the Multi-Feature being processed.\n */\n\n/**\n * Reduce flattened features in any GeoJSON object, similar to Array.reduce().\n *\n * @name flattenReduce\n * @param {FeatureCollection|Feature|Geometry} geojson any GeoJSON object\n * @param {Function} callback a method that takes (previousValue, currentFeature, featureIndex, multiFeatureIndex)\n * @param {*} [initialValue] Value to use as the first argument to the first call of the callback.\n * @returns {*} The value that results from the reduction.\n * @example\n * var features = turf.featureCollection([\n *     turf.point([26, 37], {foo: 'bar'}),\n *     turf.multiPoint([[40, 30], [36, 53]], {hello: 'world'})\n * ]);\n *\n * turf.flattenReduce(features, function (previousValue, currentFeature, featureIndex, multiFeatureIndex) {\n *   //=previousValue\n *   //=currentFeature\n *   //=featureIndex\n *   //=multiFeatureIndex\n *   return currentFeature\n * });\n */\nfunction flattenReduce(geojson, callback, initialValue) {\n    var previousValue = initialValue;\n    flattenEach(geojson, function (currentFeature, featureIndex, multiFeatureIndex) {\n        if (featureIndex === 0 && multiFeatureIndex === 0 && initialValue === undefined) previousValue = currentFeature;\n        else previousValue = callback(previousValue, currentFeature, featureIndex, multiFeatureIndex);\n    });\n    return previousValue;\n}\n\n/**\n * Callback for segmentEach\n *\n * @callback segmentEachCallback\n * @param {Feature<LineString>} currentSegment The current Segment being processed.\n * @param {number} featureIndex The current index of the Feature being processed.\n * @param {number} multiFeatureIndex The current index of the Multi-Feature being processed.\n * @param {number} geometryIndex The current index of the Geometry being processed.\n * @param {number} segmentIndex The current index of the Segment being processed.\n * @returns {void}\n */\n\n/**\n * Iterate over 2-vertex line segment in any GeoJSON object, similar to Array.forEach()\n * (Multi)Point geometries do not contain segments therefore they are ignored during this operation.\n *\n * @param {FeatureCollection|Feature|Geometry} geojson any GeoJSON\n * @param {Function} callback a method that takes (currentSegment, featureIndex, multiFeatureIndex, geometryIndex, segmentIndex)\n * @returns {void}\n * @example\n * var polygon = turf.polygon([[[-50, 5], [-40, -10], [-50, -10], [-40, 5], [-50, 5]]]);\n *\n * // Iterate over GeoJSON by 2-vertex segments\n * turf.segmentEach(polygon, function (currentSegment, featureIndex, multiFeatureIndex, geometryIndex, segmentIndex) {\n *   //=currentSegment\n *   //=featureIndex\n *   //=multiFeatureIndex\n *   //=geometryIndex\n *   //=segmentIndex\n * });\n *\n * // Calculate the total number of segments\n * var total = 0;\n * turf.segmentEach(polygon, function () {\n *     total++;\n * });\n */\nfunction segmentEach(geojson, callback) {\n    flattenEach(geojson, function (feature, featureIndex, multiFeatureIndex) {\n        var segmentIndex = 0;\n\n        // Exclude null Geometries\n        if (!feature.geometry) return;\n        // (Multi)Point geometries do not contain segments therefore they are ignored during this operation.\n        var type = feature.geometry.type;\n        if (type === 'Point' || type === 'MultiPoint') return;\n\n        // Generate 2-vertex line segments\n        var previousCoords;\n        var previousFeatureIndex = 0;\n        var previousMultiIndex = 0;\n        var prevGeomIndex = 0;\n        if (coordEach(feature, function (currentCoord, coordIndex, featureIndexCoord, multiPartIndexCoord, geometryIndex) {\n            // Simulating a meta.coordReduce() since `reduce` operations cannot be stopped by returning `false`\n            if (previousCoords === undefined || featureIndex > previousFeatureIndex || multiPartIndexCoord > previousMultiIndex || geometryIndex > prevGeomIndex) {\n                previousCoords = currentCoord;\n                previousFeatureIndex = featureIndex;\n                previousMultiIndex = multiPartIndexCoord;\n                prevGeomIndex = geometryIndex;\n                segmentIndex = 0;\n                return;\n            }\n            var currentSegment = helpers.lineString([previousCoords, currentCoord], feature.properties);\n            if (callback(currentSegment, featureIndex, multiFeatureIndex, geometryIndex, segmentIndex) === false) return false;\n            segmentIndex++;\n            previousCoords = currentCoord;\n        }) === false) return false;\n    });\n}\n\n/**\n * Callback for segmentReduce\n *\n * The first time the callback function is called, the values provided as arguments depend\n * on whether the reduce method has an initialValue argument.\n *\n * If an initialValue is provided to the reduce method:\n *  - The previousValue argument is initialValue.\n *  - The currentValue argument is the value of the first element present in the array.\n *\n * If an initialValue is not provided:\n *  - The previousValue argument is the value of the first element present in the array.\n *  - The currentValue argument is the value of the second element present in the array.\n *\n * @callback segmentReduceCallback\n * @param {*} previousValue The accumulated value previously returned in the last invocation\n * of the callback, or initialValue, if supplied.\n * @param {Feature<LineString>} currentSegment The current Segment being processed.\n * @param {number} featureIndex The current index of the Feature being processed.\n * @param {number} multiFeatureIndex The current index of the Multi-Feature being processed.\n * @param {number} geometryIndex The current index of the Geometry being processed.\n * @param {number} segmentIndex The current index of the Segment being processed.\n */\n\n/**\n * Reduce 2-vertex line segment in any GeoJSON object, similar to Array.reduce()\n * (Multi)Point geometries do not contain segments therefore they are ignored during this operation.\n *\n * @param {FeatureCollection|Feature|Geometry} geojson any GeoJSON\n * @param {Function} callback a method that takes (previousValue, currentSegment, currentIndex)\n * @param {*} [initialValue] Value to use as the first argument to the first call of the callback.\n * @returns {void}\n * @example\n * var polygon = turf.polygon([[[-50, 5], [-40, -10], [-50, -10], [-40, 5], [-50, 5]]]);\n *\n * // Iterate over GeoJSON by 2-vertex segments\n * turf.segmentReduce(polygon, function (previousSegment, currentSegment, featureIndex, multiFeatureIndex, geometryIndex, segmentIndex) {\n *   //= previousSegment\n *   //= currentSegment\n *   //= featureIndex\n *   //= multiFeatureIndex\n *   //= geometryIndex\n *   //= segmentInex\n *   return currentSegment\n * });\n *\n * // Calculate the total number of segments\n * var initialValue = 0\n * var total = turf.segmentReduce(polygon, function (previousValue) {\n *     previousValue++;\n *     return previousValue;\n * }, initialValue);\n */\nfunction segmentReduce(geojson, callback, initialValue) {\n    var previousValue = initialValue;\n    var started = false;\n    segmentEach(geojson, function (currentSegment, featureIndex, multiFeatureIndex, geometryIndex, segmentIndex) {\n        if (started === false && initialValue === undefined) previousValue = currentSegment;\n        else previousValue = callback(previousValue, currentSegment, featureIndex, multiFeatureIndex, geometryIndex, segmentIndex);\n        started = true;\n    });\n    return previousValue;\n}\n\n/**\n * Callback for lineEach\n *\n * @callback lineEachCallback\n * @param {Feature<LineString>} currentLine The current LineString|LinearRing being processed\n * @param {number} featureIndex The current index of the Feature being processed\n * @param {number} multiFeatureIndex The current index of the Multi-Feature being processed\n * @param {number} geometryIndex The current index of the Geometry being processed\n */\n\n/**\n * Iterate over line or ring coordinates in LineString, Polygon, MultiLineString, MultiPolygon Features or Geometries,\n * similar to Array.forEach.\n *\n * @name lineEach\n * @param {Geometry|Feature<LineString|Polygon|MultiLineString|MultiPolygon>} geojson object\n * @param {Function} callback a method that takes (currentLine, featureIndex, multiFeatureIndex, geometryIndex)\n * @example\n * var multiLine = turf.multiLineString([\n *   [[26, 37], [35, 45]],\n *   [[36, 53], [38, 50], [41, 55]]\n * ]);\n *\n * turf.lineEach(multiLine, function (currentLine, featureIndex, multiFeatureIndex, geometryIndex) {\n *   //=currentLine\n *   //=featureIndex\n *   //=multiFeatureIndex\n *   //=geometryIndex\n * });\n */\nfunction lineEach(geojson, callback) {\n    // validation\n    if (!geojson) throw new Error('geojson is required');\n\n    flattenEach(geojson, function (feature, featureIndex, multiFeatureIndex) {\n        if (feature.geometry === null) return;\n        var type = feature.geometry.type;\n        var coords = feature.geometry.coordinates;\n        switch (type) {\n        case 'LineString':\n            if (callback(feature, featureIndex, multiFeatureIndex, 0, 0) === false) return false;\n            break;\n        case 'Polygon':\n            for (var geometryIndex = 0; geometryIndex < coords.length; geometryIndex++) {\n                if (callback(helpers.lineString(coords[geometryIndex], feature.properties), featureIndex, multiFeatureIndex, geometryIndex) === false) return false;\n            }\n            break;\n        }\n    });\n}\n\n/**\n * Callback for lineReduce\n *\n * The first time the callback function is called, the values provided as arguments depend\n * on whether the reduce method has an initialValue argument.\n *\n * If an initialValue is provided to the reduce method:\n *  - The previousValue argument is initialValue.\n *  - The currentValue argument is the value of the first element present in the array.\n *\n * If an initialValue is not provided:\n *  - The previousValue argument is the value of the first element present in the array.\n *  - The currentValue argument is the value of the second element present in the array.\n *\n * @callback lineReduceCallback\n * @param {*} previousValue The accumulated value previously returned in the last invocation\n * of the callback, or initialValue, if supplied.\n * @param {Feature<LineString>} currentLine The current LineString|LinearRing being processed.\n * @param {number} featureIndex The current index of the Feature being processed\n * @param {number} multiFeatureIndex The current index of the Multi-Feature being processed\n * @param {number} geometryIndex The current index of the Geometry being processed\n */\n\n/**\n * Reduce features in any GeoJSON object, similar to Array.reduce().\n *\n * @name lineReduce\n * @param {Geometry|Feature<LineString|Polygon|MultiLineString|MultiPolygon>} geojson object\n * @param {Function} callback a method that takes (previousValue, currentLine, featureIndex, multiFeatureIndex, geometryIndex)\n * @param {*} [initialValue] Value to use as the first argument to the first call of the callback.\n * @returns {*} The value that results from the reduction.\n * @example\n * var multiPoly = turf.multiPolygon([\n *   turf.polygon([[[12,48],[2,41],[24,38],[12,48]], [[9,44],[13,41],[13,45],[9,44]]]),\n *   turf.polygon([[[5, 5], [0, 0], [2, 2], [4, 4], [5, 5]]])\n * ]);\n *\n * turf.lineReduce(multiPoly, function (previousValue, currentLine, featureIndex, multiFeatureIndex, geometryIndex) {\n *   //=previousValue\n *   //=currentLine\n *   //=featureIndex\n *   //=multiFeatureIndex\n *   //=geometryIndex\n *   return currentLine\n * });\n */\nfunction lineReduce(geojson, callback, initialValue) {\n    var previousValue = initialValue;\n    lineEach(geojson, function (currentLine, featureIndex, multiFeatureIndex, geometryIndex) {\n        if (featureIndex === 0 && initialValue === undefined) previousValue = currentLine;\n        else previousValue = callback(previousValue, currentLine, featureIndex, multiFeatureIndex, geometryIndex);\n    });\n    return previousValue;\n}\n\n/**\n * Finds a particular 2-vertex LineString Segment from a GeoJSON using `@turf/meta` indexes.\n *\n * Negative indexes are permitted.\n * Point & MultiPoint will always return null.\n *\n * @param {FeatureCollection|Feature|Geometry} geojson Any GeoJSON Feature or Geometry\n * @param {Object} [options={}] Optional parameters\n * @param {number} [options.featureIndex=0] Feature Index\n * @param {number} [options.multiFeatureIndex=0] Multi-Feature Index\n * @param {number} [options.geometryIndex=0] Geometry Index\n * @param {number} [options.segmentIndex=0] Segment Index\n * @param {Object} [options.properties={}] Translate Properties to output LineString\n * @param {BBox} [options.bbox={}] Translate BBox to output LineString\n * @param {number|string} [options.id={}] Translate Id to output LineString\n * @returns {Feature<LineString>} 2-vertex GeoJSON Feature LineString\n * @example\n * var multiLine = turf.multiLineString([\n *     [[10, 10], [50, 30], [30, 40]],\n *     [[-10, -10], [-50, -30], [-30, -40]]\n * ]);\n *\n * // First Segment (defaults are 0)\n * turf.findSegment(multiLine);\n * // => Feature<LineString<[[10, 10], [50, 30]]>>\n *\n * // First Segment of 2nd Multi Feature\n * turf.findSegment(multiLine, {multiFeatureIndex: 1});\n * // => Feature<LineString<[[-10, -10], [-50, -30]]>>\n *\n * // Last Segment of Last Multi Feature\n * turf.findSegment(multiLine, {multiFeatureIndex: -1, segmentIndex: -1});\n * // => Feature<LineString<[[-50, -30], [-30, -40]]>>\n */\nfunction findSegment(geojson, options) {\n    // Optional Parameters\n    options = options || {};\n    if (!helpers.isObject(options)) throw new Error('options is invalid');\n    var featureIndex = options.featureIndex || 0;\n    var multiFeatureIndex = options.multiFeatureIndex || 0;\n    var geometryIndex = options.geometryIndex || 0;\n    var segmentIndex = options.segmentIndex || 0;\n\n    // Find FeatureIndex\n    var properties = options.properties;\n    var geometry;\n\n    switch (geojson.type) {\n    case 'FeatureCollection':\n        if (featureIndex < 0) featureIndex = geojson.features.length + featureIndex;\n        properties = properties || geojson.features[featureIndex].properties;\n        geometry = geojson.features[featureIndex].geometry;\n        break;\n    case 'Feature':\n        properties = properties || geojson.properties;\n        geometry = geojson.geometry;\n        break;\n    case 'Point':\n    case 'MultiPoint':\n        return null;\n    case 'LineString':\n    case 'Polygon':\n    case 'MultiLineString':\n    case 'MultiPolygon':\n        geometry = geojson;\n        break;\n    default:\n        throw new Error('geojson is invalid');\n    }\n\n    // Find SegmentIndex\n    if (geometry === null) return null;\n    var coords = geometry.coordinates;\n    switch (geometry.type) {\n    case 'Point':\n    case 'MultiPoint':\n        return null;\n    case 'LineString':\n        if (segmentIndex < 0) segmentIndex = coords.length + segmentIndex - 1;\n        return helpers.lineString([coords[segmentIndex], coords[segmentIndex + 1]], properties, options);\n    case 'Polygon':\n        if (geometryIndex < 0) geometryIndex = coords.length + geometryIndex;\n        if (segmentIndex < 0) segmentIndex = coords[geometryIndex].length + segmentIndex - 1;\n        return helpers.lineString([coords[geometryIndex][segmentIndex], coords[geometryIndex][segmentIndex + 1]], properties, options);\n    case 'MultiLineString':\n        if (multiFeatureIndex < 0) multiFeatureIndex = coords.length + multiFeatureIndex;\n        if (segmentIndex < 0) segmentIndex = coords[multiFeatureIndex].length + segmentIndex - 1;\n        return helpers.lineString([coords[multiFeatureIndex][segmentIndex], coords[multiFeatureIndex][segmentIndex + 1]], properties, options);\n    case 'MultiPolygon':\n        if (multiFeatureIndex < 0) multiFeatureIndex = coords.length + multiFeatureIndex;\n        if (geometryIndex < 0) geometryIndex = coords[multiFeatureIndex].length + geometryIndex;\n        if (segmentIndex < 0) segmentIndex = coords[multiFeatureIndex][geometryIndex].length - segmentIndex - 1;\n        return helpers.lineString([coords[multiFeatureIndex][geometryIndex][segmentIndex], coords[multiFeatureIndex][geometryIndex][segmentIndex + 1]], properties, options);\n    }\n    throw new Error('geojson is invalid');\n}\n\n/**\n * Finds a particular Point from a GeoJSON using `@turf/meta` indexes.\n *\n * Negative indexes are permitted.\n *\n * @param {FeatureCollection|Feature|Geometry} geojson Any GeoJSON Feature or Geometry\n * @param {Object} [options={}] Optional parameters\n * @param {number} [options.featureIndex=0] Feature Index\n * @param {number} [options.multiFeatureIndex=0] Multi-Feature Index\n * @param {number} [options.geometryIndex=0] Geometry Index\n * @param {number} [options.coordIndex=0] Coord Index\n * @param {Object} [options.properties={}] Translate Properties to output Point\n * @param {BBox} [options.bbox={}] Translate BBox to output Point\n * @param {number|string} [options.id={}] Translate Id to output Point\n * @returns {Feature<Point>} 2-vertex GeoJSON Feature Point\n * @example\n * var multiLine = turf.multiLineString([\n *     [[10, 10], [50, 30], [30, 40]],\n *     [[-10, -10], [-50, -30], [-30, -40]]\n * ]);\n *\n * // First Segment (defaults are 0)\n * turf.findPoint(multiLine);\n * // => Feature<Point<[10, 10]>>\n *\n * // First Segment of the 2nd Multi-Feature\n * turf.findPoint(multiLine, {multiFeatureIndex: 1});\n * // => Feature<Point<[-10, -10]>>\n *\n * // Last Segment of last Multi-Feature\n * turf.findPoint(multiLine, {multiFeatureIndex: -1, coordIndex: -1});\n * // => Feature<Point<[-30, -40]>>\n */\nfunction findPoint(geojson, options) {\n    // Optional Parameters\n    options = options || {};\n    if (!helpers.isObject(options)) throw new Error('options is invalid');\n    var featureIndex = options.featureIndex || 0;\n    var multiFeatureIndex = options.multiFeatureIndex || 0;\n    var geometryIndex = options.geometryIndex || 0;\n    var coordIndex = options.coordIndex || 0;\n\n    // Find FeatureIndex\n    var properties = options.properties;\n    var geometry;\n\n    switch (geojson.type) {\n    case 'FeatureCollection':\n        if (featureIndex < 0) featureIndex = geojson.features.length + featureIndex;\n        properties = properties || geojson.features[featureIndex].properties;\n        geometry = geojson.features[featureIndex].geometry;\n        break;\n    case 'Feature':\n        properties = properties || geojson.properties;\n        geometry = geojson.geometry;\n        break;\n    case 'Point':\n    case 'MultiPoint':\n        return null;\n    case 'LineString':\n    case 'Polygon':\n    case 'MultiLineString':\n    case 'MultiPolygon':\n        geometry = geojson;\n        break;\n    default:\n        throw new Error('geojson is invalid');\n    }\n\n    // Find Coord Index\n    if (geometry === null) return null;\n    var coords = geometry.coordinates;\n    switch (geometry.type) {\n    case 'Point':\n        return helpers.point(coords, properties, options);\n    case 'MultiPoint':\n        if (multiFeatureIndex < 0) multiFeatureIndex = coords.length + multiFeatureIndex;\n        return helpers.point(coords[multiFeatureIndex], properties, options);\n    case 'LineString':\n        if (coordIndex < 0) coordIndex = coords.length + coordIndex;\n        return helpers.point(coords[coordIndex], properties, options);\n    case 'Polygon':\n        if (geometryIndex < 0) geometryIndex = coords.length + geometryIndex;\n        if (coordIndex < 0) coordIndex = coords[geometryIndex].length + coordIndex;\n        return helpers.point(coords[geometryIndex][coordIndex], properties, options);\n    case 'MultiLineString':\n        if (multiFeatureIndex < 0) multiFeatureIndex = coords.length + multiFeatureIndex;\n        if (coordIndex < 0) coordIndex = coords[multiFeatureIndex].length + coordIndex;\n        return helpers.point(coords[multiFeatureIndex][coordIndex], properties, options);\n    case 'MultiPolygon':\n        if (multiFeatureIndex < 0) multiFeatureIndex = coords.length + multiFeatureIndex;\n        if (geometryIndex < 0) geometryIndex = coords[multiFeatureIndex].length + geometryIndex;\n        if (coordIndex < 0) coordIndex = coords[multiFeatureIndex][geometryIndex].length - coordIndex;\n        return helpers.point(coords[multiFeatureIndex][geometryIndex][coordIndex], properties, options);\n    }\n    throw new Error('geojson is invalid');\n}\n\nexports.coordEach = coordEach;\nexports.coordReduce = coordReduce;\nexports.propEach = propEach;\nexports.propReduce = propReduce;\nexports.featureEach = featureEach;\nexports.featureReduce = featureReduce;\nexports.coordAll = coordAll;\nexports.geomEach = geomEach;\nexports.geomReduce = geomReduce;\nexports.flattenEach = flattenEach;\nexports.flattenReduce = flattenReduce;\nexports.segmentEach = segmentEach;\nexports.segmentReduce = segmentReduce;\nexports.lineEach = lineEach;\nexports.lineReduce = lineReduce;\nexports.findSegment = findSegment;\nexports.findPoint = findPoint;\n","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar helpers_1 = require(\"@turf/helpers\");\r\n/**\r\n * Unwrap a coordinate from a Point Feature, Geometry or a single coordinate.\r\n *\r\n * @name getCoord\r\n * @param {Array<number>|Geometry<Point>|Feature<Point>} coord GeoJSON Point or an Array of numbers\r\n * @returns {Array<number>} coordinates\r\n * @example\r\n * var pt = turf.point([10, 10]);\r\n *\r\n * var coord = turf.getCoord(pt);\r\n * //= [10, 10]\r\n */\r\nfunction getCoord(coord) {\r\n    if (!coord) {\r\n        throw new Error(\"coord is required\");\r\n    }\r\n    if (!Array.isArray(coord)) {\r\n        if (coord.type === \"Feature\" && coord.geometry !== null && coord.geometry.type === \"Point\") {\r\n            return coord.geometry.coordinates;\r\n        }\r\n        if (coord.type === \"Point\") {\r\n            return coord.coordinates;\r\n        }\r\n    }\r\n    if (Array.isArray(coord) && coord.length >= 2 && !Array.isArray(coord[0]) && !Array.isArray(coord[1])) {\r\n        return coord;\r\n    }\r\n    throw new Error(\"coord must be GeoJSON Point or an Array of numbers\");\r\n}\r\nexports.getCoord = getCoord;\r\n/**\r\n * Unwrap coordinates from a Feature, Geometry Object or an Array\r\n *\r\n * @name getCoords\r\n * @param {Array<any>|Geometry|Feature} coords Feature, Geometry Object or an Array\r\n * @returns {Array<any>} coordinates\r\n * @example\r\n * var poly = turf.polygon([[[119.32, -8.7], [119.55, -8.69], [119.51, -8.54], [119.32, -8.7]]]);\r\n *\r\n * var coords = turf.getCoords(poly);\r\n * //= [[[119.32, -8.7], [119.55, -8.69], [119.51, -8.54], [119.32, -8.7]]]\r\n */\r\nfunction getCoords(coords) {\r\n    if (Array.isArray(coords)) {\r\n        return coords;\r\n    }\r\n    // Feature\r\n    if (coords.type === \"Feature\") {\r\n        if (coords.geometry !== null) {\r\n            return coords.geometry.coordinates;\r\n        }\r\n    }\r\n    else {\r\n        // Geometry\r\n        if (coords.coordinates) {\r\n            return coords.coordinates;\r\n        }\r\n    }\r\n    throw new Error(\"coords must be GeoJSON Feature, Geometry Object or an Array\");\r\n}\r\nexports.getCoords = getCoords;\r\n/**\r\n * Checks if coordinates contains a number\r\n *\r\n * @name containsNumber\r\n * @param {Array<any>} coordinates GeoJSON Coordinates\r\n * @returns {boolean} true if Array contains a number\r\n */\r\nfunction containsNumber(coordinates) {\r\n    if (coordinates.length > 1 && helpers_1.isNumber(coordinates[0]) && helpers_1.isNumber(coordinates[1])) {\r\n        return true;\r\n    }\r\n    if (Array.isArray(coordinates[0]) && coordinates[0].length) {\r\n        return containsNumber(coordinates[0]);\r\n    }\r\n    throw new Error(\"coordinates must only contain numbers\");\r\n}\r\nexports.containsNumber = containsNumber;\r\n/**\r\n * Enforce expectations about types of GeoJSON objects for Turf.\r\n *\r\n * @name geojsonType\r\n * @param {GeoJSON} value any GeoJSON object\r\n * @param {string} type expected GeoJSON type\r\n * @param {string} name name of calling function\r\n * @throws {Error} if value is not the expected type.\r\n */\r\nfunction geojsonType(value, type, name) {\r\n    if (!type || !name) {\r\n        throw new Error(\"type and name required\");\r\n    }\r\n    if (!value || value.type !== type) {\r\n        throw new Error(\"Invalid input to \" + name + \": must be a \" + type + \", given \" + value.type);\r\n    }\r\n}\r\nexports.geojsonType = geojsonType;\r\n/**\r\n * Enforce expectations about types of {@link Feature} inputs for Turf.\r\n * Internally this uses {@link geojsonType} to judge geometry types.\r\n *\r\n * @name featureOf\r\n * @param {Feature} feature a feature with an expected geometry type\r\n * @param {string} type expected GeoJSON type\r\n * @param {string} name name of calling function\r\n * @throws {Error} error if value is not the expected type.\r\n */\r\nfunction featureOf(feature, type, name) {\r\n    if (!feature) {\r\n        throw new Error(\"No feature passed\");\r\n    }\r\n    if (!name) {\r\n        throw new Error(\".featureOf() requires a name\");\r\n    }\r\n    if (!feature || feature.type !== \"Feature\" || !feature.geometry) {\r\n        throw new Error(\"Invalid input to \" + name + \", Feature with geometry required\");\r\n    }\r\n    if (!feature.geometry || feature.geometry.type !== type) {\r\n        throw new Error(\"Invalid input to \" + name + \": must be a \" + type + \", given \" + feature.geometry.type);\r\n    }\r\n}\r\nexports.featureOf = featureOf;\r\n/**\r\n * Enforce expectations about types of {@link FeatureCollection} inputs for Turf.\r\n * Internally this uses {@link geojsonType} to judge geometry types.\r\n *\r\n * @name collectionOf\r\n * @param {FeatureCollection} featureCollection a FeatureCollection for which features will be judged\r\n * @param {string} type expected GeoJSON type\r\n * @param {string} name name of calling function\r\n * @throws {Error} if value is not the expected type.\r\n */\r\nfunction collectionOf(featureCollection, type, name) {\r\n    if (!featureCollection) {\r\n        throw new Error(\"No featureCollection passed\");\r\n    }\r\n    if (!name) {\r\n        throw new Error(\".collectionOf() requires a name\");\r\n    }\r\n    if (!featureCollection || featureCollection.type !== \"FeatureCollection\") {\r\n        throw new Error(\"Invalid input to \" + name + \", FeatureCollection required\");\r\n    }\r\n    for (var _i = 0, _a = featureCollection.features; _i < _a.length; _i++) {\r\n        var feature = _a[_i];\r\n        if (!feature || feature.type !== \"Feature\" || !feature.geometry) {\r\n            throw new Error(\"Invalid input to \" + name + \", Feature with geometry required\");\r\n        }\r\n        if (!feature.geometry || feature.geometry.type !== type) {\r\n            throw new Error(\"Invalid input to \" + name + \": must be a \" + type + \", given \" + feature.geometry.type);\r\n        }\r\n    }\r\n}\r\nexports.collectionOf = collectionOf;\r\n/**\r\n * Get Geometry from Feature or Geometry Object\r\n *\r\n * @param {Feature|Geometry} geojson GeoJSON Feature or Geometry Object\r\n * @returns {Geometry|null} GeoJSON Geometry Object\r\n * @throws {Error} if geojson is not a Feature or Geometry Object\r\n * @example\r\n * var point = {\r\n *   \"type\": \"Feature\",\r\n *   \"properties\": {},\r\n *   \"geometry\": {\r\n *     \"type\": \"Point\",\r\n *     \"coordinates\": [110, 40]\r\n *   }\r\n * }\r\n * var geom = turf.getGeom(point)\r\n * //={\"type\": \"Point\", \"coordinates\": [110, 40]}\r\n */\r\nfunction getGeom(geojson) {\r\n    if (geojson.type === \"Feature\") {\r\n        return geojson.geometry;\r\n    }\r\n    return geojson;\r\n}\r\nexports.getGeom = getGeom;\r\n/**\r\n * Get GeoJSON object's type, Geometry type is prioritize.\r\n *\r\n * @param {GeoJSON} geojson GeoJSON object\r\n * @param {string} [name=\"geojson\"] name of the variable to display in error message\r\n * @returns {string} GeoJSON type\r\n * @example\r\n * var point = {\r\n *   \"type\": \"Feature\",\r\n *   \"properties\": {},\r\n *   \"geometry\": {\r\n *     \"type\": \"Point\",\r\n *     \"coordinates\": [110, 40]\r\n *   }\r\n * }\r\n * var geom = turf.getType(point)\r\n * //=\"Point\"\r\n */\r\nfunction getType(geojson, name) {\r\n    if (geojson.type === \"FeatureCollection\") {\r\n        return \"FeatureCollection\";\r\n    }\r\n    if (geojson.type === \"GeometryCollection\") {\r\n        return \"GeometryCollection\";\r\n    }\r\n    if (geojson.type === \"Feature\" && geojson.geometry !== null) {\r\n        return geojson.geometry.type;\r\n    }\r\n    return geojson.type;\r\n}\r\nexports.getType = getType;\r\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar helpers_1 = require(\"@turf/helpers\");\nvar invariant_1 = require(\"@turf/invariant\");\n// http://en.wikipedia.org/wiki/Haversine_formula\n// http://www.movable-type.co.uk/scripts/latlong.html\n/**\n * Takes two {@link Point|points} and finds the geographic bearing between them,\n * i.e. the angle measured in degrees from the north line (0 degrees)\n *\n * @name bearing\n * @param {Coord} start starting Point\n * @param {Coord} end ending Point\n * @param {Object} [options={}] Optional parameters\n * @param {boolean} [options.final=false] calculates the final bearing if true\n * @returns {number} bearing in decimal degrees, between -180 and 180 degrees (positive clockwise)\n * @example\n * var point1 = turf.point([-75.343, 39.984]);\n * var point2 = turf.point([-75.534, 39.123]);\n *\n * var bearing = turf.bearing(point1, point2);\n *\n * //addToMap\n * var addToMap = [point1, point2]\n * point1.properties['marker-color'] = '#f00'\n * point2.properties['marker-color'] = '#0f0'\n * point1.properties.bearing = bearing\n */\nfunction bearing(start, end, options) {\n    if (options === void 0) { options = {}; }\n    // Reverse calculation\n    if (options.final === true) {\n        return calculateFinalBearing(start, end);\n    }\n    var coordinates1 = invariant_1.getCoord(start);\n    var coordinates2 = invariant_1.getCoord(end);\n    var lon1 = helpers_1.degreesToRadians(coordinates1[0]);\n    var lon2 = helpers_1.degreesToRadians(coordinates2[0]);\n    var lat1 = helpers_1.degreesToRadians(coordinates1[1]);\n    var lat2 = helpers_1.degreesToRadians(coordinates2[1]);\n    var a = Math.sin(lon2 - lon1) * Math.cos(lat2);\n    var b = Math.cos(lat1) * Math.sin(lat2) -\n        Math.sin(lat1) * Math.cos(lat2) * Math.cos(lon2 - lon1);\n    return helpers_1.radiansToDegrees(Math.atan2(a, b));\n}\n/**\n * Calculates Final Bearing\n *\n * @private\n * @param {Coord} start starting Point\n * @param {Coord} end ending Point\n * @returns {number} bearing\n */\nfunction calculateFinalBearing(start, end) {\n    // Swap start & end\n    var bear = bearing(end, start);\n    bear = (bear + 180) % 360;\n    return bear;\n}\nexports.default = bearing;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n// http://en.wikipedia.org/wiki/Haversine_formula\n// http://www.movable-type.co.uk/scripts/latlong.html\nvar helpers_1 = require(\"@turf/helpers\");\nvar invariant_1 = require(\"@turf/invariant\");\n/**\n * Takes a {@link Point} and calculates the location of a destination point given a distance in\n * degrees, radians, miles, or kilometers; and bearing in degrees.\n * This uses the [Haversine formula](http://en.wikipedia.org/wiki/Haversine_formula) to account for global curvature.\n *\n * @name destination\n * @param {Coord} origin starting point\n * @param {number} distance distance from the origin point\n * @param {number} bearing ranging from -180 to 180\n * @param {Object} [options={}] Optional parameters\n * @param {string} [options.units='kilometers'] miles, kilometers, degrees, or radians\n * @param {Object} [options.properties={}] Translate properties to Point\n * @returns {Feature<Point>} destination point\n * @example\n * var point = turf.point([-75.343, 39.984]);\n * var distance = 50;\n * var bearing = 90;\n * var options = {units: 'miles'};\n *\n * var destination = turf.destination(point, distance, bearing, options);\n *\n * //addToMap\n * var addToMap = [point, destination]\n * destination.properties['marker-color'] = '#f00';\n * point.properties['marker-color'] = '#0f0';\n */\nfunction destination(origin, distance, bearing, options) {\n    if (options === void 0) { options = {}; }\n    // Handle input\n    var coordinates1 = invariant_1.getCoord(origin);\n    var longitude1 = helpers_1.degreesToRadians(coordinates1[0]);\n    var latitude1 = helpers_1.degreesToRadians(coordinates1[1]);\n    var bearingRad = helpers_1.degreesToRadians(bearing);\n    var radians = helpers_1.lengthToRadians(distance, options.units);\n    // Main\n    var latitude2 = Math.asin(Math.sin(latitude1) * Math.cos(radians) +\n        Math.cos(latitude1) * Math.sin(radians) * Math.cos(bearingRad));\n    var longitude2 = longitude1 + Math.atan2(Math.sin(bearingRad) * Math.sin(radians) * Math.cos(latitude1), Math.cos(radians) - Math.sin(latitude1) * Math.sin(latitude2));\n    var lng = helpers_1.radiansToDegrees(longitude2);\n    var lat = helpers_1.radiansToDegrees(latitude2);\n    return helpers_1.point([lng, lat], options.properties);\n}\nexports.default = destination;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar invariant_1 = require(\"@turf/invariant\");\nvar helpers_1 = require(\"@turf/helpers\");\n//http://en.wikipedia.org/wiki/Haversine_formula\n//http://www.movable-type.co.uk/scripts/latlong.html\n/**\n * Calculates the distance between two {@link Point|points} in degrees, radians, miles, or kilometers.\n * This uses the [Haversine formula](http://en.wikipedia.org/wiki/Haversine_formula) to account for global curvature.\n *\n * @name distance\n * @param {Coord} from origin point\n * @param {Coord} to destination point\n * @param {Object} [options={}] Optional parameters\n * @param {string} [options.units='kilometers'] can be degrees, radians, miles, or kilometers\n * @returns {number} distance between the two points\n * @example\n * var from = turf.point([-75.343, 39.984]);\n * var to = turf.point([-75.534, 39.123]);\n * var options = {units: 'miles'};\n *\n * var distance = turf.distance(from, to, options);\n *\n * //addToMap\n * var addToMap = [from, to];\n * from.properties.distance = distance;\n * to.properties.distance = distance;\n */\nfunction distance(from, to, options) {\n    if (options === void 0) { options = {}; }\n    var coordinates1 = invariant_1.getCoord(from);\n    var coordinates2 = invariant_1.getCoord(to);\n    var dLat = helpers_1.degreesToRadians((coordinates2[1] - coordinates1[1]));\n    var dLon = helpers_1.degreesToRadians((coordinates2[0] - coordinates1[0]));\n    var lat1 = helpers_1.degreesToRadians(coordinates1[1]);\n    var lat2 = helpers_1.degreesToRadians(coordinates2[1]);\n    var a = Math.pow(Math.sin(dLat / 2), 2) +\n        Math.pow(Math.sin(dLon / 2), 2) * Math.cos(lat1) * Math.cos(lat2);\n    return helpers_1.radiansToLength(2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a)), options.units);\n}\nexports.default = distance;\n","\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n}\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar bearing_1 = __importDefault(require(\"@turf/bearing\"));\nvar destination_1 = __importDefault(require(\"@turf/destination\"));\nvar distance_1 = __importDefault(require(\"@turf/distance\"));\nvar helpers_1 = require(\"@turf/helpers\");\nvar invariant_1 = require(\"@turf/invariant\");\n/**\n * Takes a {@link LineString} and returns a {@link Point} at a specified distance along the line.\n *\n * @name along\n * @param {Feature<LineString>} line input line\n * @param {number} distance distance along the line\n * @param {Object} [options] Optional parameters\n * @param {string} [options.units=\"kilometers\"] can be degrees, radians, miles, or kilometers\n * @returns {Feature<Point>} Point `distance` `units` along the line\n * @example\n * var line = turf.lineString([[-83, 30], [-84, 36], [-78, 41]]);\n * var options = {units: 'miles'};\n *\n * var along = turf.along(line, 200, options);\n *\n * //addToMap\n * var addToMap = [along, line]\n */\nfunction along(line, distance, options) {\n    if (options === void 0) { options = {}; }\n    // Get Coords\n    var geom = invariant_1.getGeom(line);\n    var coords = geom.coordinates;\n    var travelled = 0;\n    for (var i = 0; i < coords.length; i++) {\n        if (distance >= travelled && i === coords.length - 1) {\n            break;\n        }\n        else if (travelled >= distance) {\n            var overshot = distance - travelled;\n            if (!overshot) {\n                return helpers_1.point(coords[i]);\n            }\n            else {\n                var direction = bearing_1.default(coords[i], coords[i - 1]) - 180;\n                var interpolated = destination_1.default(coords[i], overshot, direction, options);\n                return interpolated;\n            }\n        }\n        else {\n            travelled += distance_1.default(coords[i], coords[i + 1], options);\n        }\n    }\n    return helpers_1.point(coords[coords.length - 1]);\n}\nexports.default = along;\n","\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n}\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar distance_1 = __importDefault(require(\"@turf/distance\"));\nvar meta_1 = require(\"@turf/meta\");\n/**\n * Takes a {@link GeoJSON} and measures its length in the specified units, {@link (Multi)Point}'s distance are ignored.\n *\n * @name length\n * @param {Feature<LineString|MultiLineString>} geojson GeoJSON to measure\n * @param {Object} [options={}] Optional parameters\n * @param {string} [options.units=kilometers] can be degrees, radians, miles, or kilometers\n * @returns {number} length of GeoJSON\n * @example\n * var line = turf.lineString([[115, -32], [131, -22], [143, -25], [150, -34]]);\n * var length = turf.length(line, {units: 'miles'});\n *\n * //addToMap\n * var addToMap = [line];\n * line.properties.distance = length;\n */\nfunction length(geojson, options) {\n    if (options === void 0) { options = {}; }\n    // Calculate distance from 2-vertex line segments\n    return meta_1.segmentReduce(geojson, function (previousValue, segment) {\n        var coords = segment.geometry.coordinates;\n        return previousValue + distance_1.default(coords[0], coords[1], options);\n    }, 0);\n}\nexports.default = length;\n","import { coordAll } from '@turf/meta';\nimport { lineString } from '@turf/helpers';\nimport { getCoord } from '@turf/invariant';\nimport along from '@turf/along';\nimport lineLength from '@turf/length';\nimport bearing from '@turf/bearing';\n\nconst TOLERANCE = 0.000001;\nconst floatEquals = (f1, f2) => Math.abs(f1 - f2) < TOLERANCE;\nconst coordEquals = (c1 = [], c2 = []) => floatEquals(c1[0], c2[0]) && floatEquals(c1[1], c2[1]);\nconst asKey = coord => `${coord[0].toFixed(6)},${coord[1].toFixed(6)}`;\nconst last = (array = []) => array[array.length - 1];\n\n// find the point at the given distance ratio on the linestring\nconst project = ratio => ls => {\n  const length = lineLength(ls);\n  const lngLat = getCoord(along(ls, length * ratio));\n  // keep the local bearing of the line to later choose an anchor minimizing the portion of line covered.\n  const localLineBearing = bearing(\n    along(ls, length * (ratio - 0.1)),\n    along(ls, length * (ratio + 0.1))\n  );\n\n  return { lngLat, localLineBearing };\n};\n\nfunction distinctSegment(coordinates, coordCounts) {\n  const adjacentCoordsUsedOnce = [[]];\n  coordinates.forEach(coord => {\n    if (coordCounts.get(asKey(coord)) > 1) {\n      adjacentCoordsUsedOnce.push([]);\n    } else {\n      last(adjacentCoordsUsedOnce).push(coord);\n    }\n  });\n  const longestDistinctSegment = adjacentCoordsUsedOnce\n    .filter(a => a.length > 0)\n    .reduce((longest, current) => current.length > longest.length ? current : longest, []);\n  \n  return lineString(longestDistinctSegment.length === 0\n    ? coordinates\n    : longestDistinctSegment,\n  );\n}\n\n// extract the longest segment of each linestring\n// whose coordinates don't overlap with another feature\nexport function findDistinctSegments(linestrings) {\n  if (linestrings.length < 2) {\n    return linestrings;\n  }\n  // extract raw coordinates\n  const featuresCoords = linestrings.map(coordAll);\n  // count occurences of each coordinate accross all features\n  const coordCounts = new Map();\n  [].concat(...featuresCoords).forEach(coord => {\n    coordCounts.set(asKey(coord), (coordCounts.get(asKey(coord)) || 0) + 1);\n  });\n  return featuresCoords.map(coordinates => distinctSegment(coordinates, coordCounts));\n}\n\nfunction toSimpleLinestring(feature) {\n  const allCoordsWithNoDups = coordAll(feature).reduce((noDups, coord) => {\n    const prevCoord = last(noDups);\n    if (!prevCoord || !coordEquals(prevCoord, coord)) {\n      noDups.push(coord);\n    }\n    return noDups;\n  }, [])\n  return lineString(allCoordsWithNoDups);\n};\n\n// Reduce possibilities of collision by chosing anchors so that labels repulse each other\nfunction optimizeAnchors(positions) {\n  return positions.map((position, index) => {\n    const others = positions.slice();\n    others.splice(index, 1);\n    const othersBearing = getBearingFromOtherPoints(position, others);\n    return {\n      lngLat: position.lngLat,\n      anchor: getAnchor(position, othersBearing),\n    };\n  });\n}\n\nfunction getBearingFromOtherPoints(position, others) {\n  return others\n    .map(other => bearing(other.lngLat, position.lngLat))\n    .reduce((avg, value, _index, { length }) => avg + value / length, 0)  // mean\n  || 0;\n}\n\nfunction getAnchor(position, otherBearing) {\n  const axis = (Math.abs(position.localLineBearing) < 45 || Math.abs(position.localLineBearing) > 135)\n    ? 'vertical'\n    : 'horizontal';\n\n  if (axis === 'vertical') {\n    return otherBearing > 0 ? 'left' : 'right';\n  }\n  return Math.abs(otherBearing) < 90 ? 'bottom' : 'top';\n}\n\n// routes can be a FeatureCollection or an array of Feature or Geometry\nexport function getLabelPositions(routes = []) {\n  const featuresOrGeoms = Array.isArray(routes) ? routes : routes.features; \n  const lineStrings = featuresOrGeoms.map(toSimpleLinestring);\n  const segments = findDistinctSegments(lineStrings);\n  const positions = segments.map(project(0.5))\n  return optimizeAnchors(positions);\n}\n"],"names":["feature","geom","properties","options","feat","type","id","bbox","geometry","point","coordinates","polygon","_i","coordinates_1","length","ring","Error","j","lineString","featureCollection","features","fc","multiLineString","multiPoint","multiPolygon","radiansToLength","radians","units","factor","exports","factors","lengthToRadians","distance","radiansToDegrees","Math","PI","isNumber","num","isNaN","Array","isArray","test","Object","defineProperty","value","centimeters","earthRadius","centimetres","degrees","feet","inches","kilometers","kilometres","meters","metres","miles","millimeters","millimetres","nauticalmiles","yards","acres","map","coords","geometries","precision","multiplier","pow","round","bearing","angle","originalUnit","finalUnit","area","startFactor","areaFactors","finalFactor","input","constructor","forEach","indexOf","coordEach","geojson","callback","excludeWrapCoord","k","l","stopG","geometryMaybeCollection","isGeometryCollection","wrapShrink","coordIndex","isFeatureCollection","isFeature","stop","featureIndex","geomIndex","multiFeatureIndex","geometryIndex","geomType","propEach","i","featureEach","geomEach","g","featureProperties","featureBBox","featureId","undefined","flattenEach","helpers","segmentEach","segmentIndex","previousCoords","previousFeatureIndex","previousMultiIndex","prevGeomIndex","currentCoord","featureIndexCoord","multiPartIndexCoord","currentSegment","lineEach","initialValue","previousValue","currentProperties","currentFeature","coord","push","currentGeometry","started","currentLine","isObject","containsNumber","helpers_1","name","_a","start","end","final","bear","calculateFinalBearing","coordinates1","invariant_1","getCoord","coordinates2","lon1","degreesToRadians","lon2","lat1","lat2","a","sin","cos","b","atan2","origin","longitude1","latitude1","bearingRad","latitude2","asin","longitude2","lng","lat","from","to","dLat","dLon","sqrt","__importDefault","this","mod","__esModule","bearing_1","require$$0","destination_1","require$$1","distance_1","require$$2","line","getGeom","travelled","overshot","direction","default","meta_1","segmentReduce","segment","floatEquals","f1","f2","abs","asKey","toFixed","last","array","project","ratio","ls","lineLength","lngLat","along","localLineBearing","findDistinctSegments","linestrings","featuresCoords","coordAll","coordCounts","Map","concat","set","get","adjacentCoordsUsedOnce","longestDistinctSegment","filter","reduce","longest","current","distinctSegment","toSimpleLinestring","allCoordsWithNoDups","noDups","prevCoord","c1","c2","coordEquals","optimizeAnchors","positions","position","index","others","slice","splice","othersBearing","other","avg","_index","getBearingFromOtherPoints","anchor","getAnchor","otherBearing","routes","featuresOrGeoms","lineStrings","segments"],"mappings":"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"}